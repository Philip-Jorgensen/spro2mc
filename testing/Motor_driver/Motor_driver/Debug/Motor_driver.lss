
Motor_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  000012b6  0000134a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800156  00800156  000013a0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001626  00000000  00000000  0000154c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab5  00000000  00000000  00002b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a86  00000000  00000000  00003627  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  000040b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005dd  00000000  00000000  00004318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c96  00000000  00000000  000048f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000558b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      68:	06 02       	muls	r16, r22
      6a:	a3 01       	movw	r20, r6
      6c:	09 02       	muls	r16, r25
      6e:	a6 01       	movw	r20, r12
      70:	00 02       	muls	r16, r16
      72:	a0 01       	movw	r20, r0
      74:	03 02       	muls	r16, r19
      76:	a9 01       	movw	r20, r18
      78:	2a 02       	muls	r18, r26
      7a:	2f 02       	muls	r18, r31
      7c:	34 02       	muls	r19, r20
      7e:	39 02       	muls	r19, r25
      80:	3e 02       	muls	r19, r30
      82:	43 02       	muls	r20, r19
      84:	48 02       	muls	r20, r24
      86:	4d 02       	muls	r20, r29

00000088 <__trampolines_end>:
      88:	63 64       	ori	r22, 0x43	; 67
      8a:	69 6e       	ori	r22, 0xE9	; 233
      8c:	6f 70       	andi	r22, 0x0F	; 15
      8e:	73 75       	andi	r23, 0x53	; 83
      90:	78 58       	subi	r23, 0x88	; 136
      92:	5b 00       	.word	0x005b	; ????

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d8 e0       	ldi	r29, 0x08	; 8
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e6 eb       	ldi	r30, 0xB6	; 182
      a8:	f2 e1       	ldi	r31, 0x12	; 18
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0
      b0:	a6 35       	cpi	r26, 0x56	; 86
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
      b6:	21 e0       	ldi	r18, 0x01	; 1
      b8:	a6 e5       	ldi	r26, 0x56	; 86
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	ad 35       	cpi	r26, 0x5D	; 93
      c2:	b2 07       	cpc	r27, r18
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	0e 94 8a 00 	call	0x114	; 0x114 <main>
      ca:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <control_motor>:
		*/
		
	}
}
// A control motor function.
void control_motor(unsigned char motor_id, int on_value){
      d2:	1f 93       	push	r17
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29
      d8:	18 2f       	mov	r17, r24
      da:	eb 01       	movw	r28, r22
	if(on_value>=0){ // If the run value (speed?) is greater than 0, make it run clockwise.
      dc:	dd 23       	and	r29, r29
      de:	54 f0       	brlt	.+20     	; 0xf4 <control_motor+0x22>
		motor_set_state(motor_id,CCW);
      e0:	62 e0       	ldi	r22, 0x02	; 2
      e2:	0e 94 93 01 	call	0x326	; 0x326 <motor_set_state>
		motor_set_pwm(motor_id,on_value,0);
      e6:	40 e0       	ldi	r20, 0x00	; 0
      e8:	50 e0       	ldi	r21, 0x00	; 0
      ea:	be 01       	movw	r22, r28
      ec:	81 2f       	mov	r24, r17
      ee:	0e 94 0e 02 	call	0x41c	; 0x41c <motor_set_pwm>
	}
	if(on_value<0){
		motor_set_state(motor_id,CW); // If speed is less than 0, make it run counter clockwise (It is opposite of what it does irl).
		motor_set_pwm(motor_id,(-1)*on_value,0); // Since 'on_value' is below 0, it is multiplied by (-1) to make it positive.
	}
}
      f2:	0c c0       	rjmp	.+24     	; 0x10c <control_motor+0x3a>
	if(on_value>=0){ // If the run value (speed?) is greater than 0, make it run clockwise.
		motor_set_state(motor_id,CCW);
		motor_set_pwm(motor_id,on_value,0);
	}
	if(on_value<0){
		motor_set_state(motor_id,CW); // If speed is less than 0, make it run counter clockwise (It is opposite of what it does irl).
      f4:	61 e0       	ldi	r22, 0x01	; 1
      f6:	0e 94 93 01 	call	0x326	; 0x326 <motor_set_state>
		motor_set_pwm(motor_id,(-1)*on_value,0); // Since 'on_value' is below 0, it is multiplied by (-1) to make it positive.
      fa:	66 27       	eor	r22, r22
      fc:	77 27       	eor	r23, r23
      fe:	6c 1b       	sub	r22, r28
     100:	7d 0b       	sbc	r23, r29
     102:	40 e0       	ldi	r20, 0x00	; 0
     104:	50 e0       	ldi	r21, 0x00	; 0
     106:	81 2f       	mov	r24, r17
     108:	0e 94 0e 02 	call	0x41c	; 0x41c <motor_set_pwm>
	}
}
     10c:	df 91       	pop	r29
     10e:	cf 91       	pop	r28
     110:	1f 91       	pop	r17
     112:	08 95       	ret

00000114 <main>:
int grabber_rps_to_spe(float);
void grabber_open(void);
void grabber_close(void);

int main(void)
{
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
     118:	00 d0       	rcall	.+0      	; 0x11a <main+0x6>
     11a:	00 d0       	rcall	.+0      	; 0x11c <main+0x8>
     11c:	cd b7       	in	r28, 0x3d	; 61
     11e:	de b7       	in	r29, 0x3e	; 62
	
	uart_init(); // Open the communication to the micro controller
     120:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <uart_init>
	i2c_init(); // Initialize the i2c communication.
     124:	0e 94 98 02 	call	0x530	; 0x530 <i2c_init>
	io_redirect(); // Redirect the input/output to the computer.
     128:	0e 94 09 03 	call	0x612	; 0x612 <io_redirect>
	
	DDRD = 0xFF; //I/O board:PD4…7 as outputs, for LEDs
     12c:	8f ef       	ldi	r24, 0xFF	; 255
     12e:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0xF0; //I/O board PC0…3 as inputs, for buttons
     130:	80 ef       	ldi	r24, 0xF0	; 240
     132:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x3F; // Enable internal pull at PC0..3 inputs
     134:	8f e3       	ldi	r24, 0x3F	; 63
     136:	88 b9       	out	0x08, r24	; 8
	PORTD = 0x00; // Set output LEDs to off
     138:	1b b8       	out	0x0b, r1	; 11
	
	// Make sure all the motors are stopped from the beginning (Initialization)
	motor_init_pwm(PWM_FREQUENCY_1500);
     13a:	83 e0       	ldi	r24, 0x03	; 3
     13c:	0e 94 6d 02 	call	0x4da	; 0x4da <motor_init_pwm>
	
	printf("Adafruit 1438\n");
     140:	8c e1       	ldi	r24, 0x1C	; 28
     142:	91 e0       	ldi	r25, 0x01	; 1
     144:	0e 94 30 03 	call	0x660	; 0x660 <puts>
	
	// M1,..,M4 are ports on the "Adafruit 1438"
	motor_set_state(M1, STOP);
     148:	60 e0       	ldi	r22, 0x00	; 0
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	0e 94 93 01 	call	0x326	; 0x326 <motor_set_state>
	motor_set_state(M2, STOP);
     150:	60 e0       	ldi	r22, 0x00	; 0
     152:	82 e0       	ldi	r24, 0x02	; 2
     154:	0e 94 93 01 	call	0x326	; 0x326 <motor_set_state>
	motor_set_state(M3, STOP);
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	83 e0       	ldi	r24, 0x03	; 3
     15c:	0e 94 93 01 	call	0x326	; 0x326 <motor_set_state>
	motor_set_state(M4, STOP);
     160:	60 e0       	ldi	r22, 0x00	; 0
     162:	84 e0       	ldi	r24, 0x04	; 4
     164:	0e 94 93 01 	call	0x326	; 0x326 <motor_set_state>
	motor_set_state(M5, STOP);
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	85 e0       	ldi	r24, 0x05	; 5
     16c:	0e 94 93 01 	call	0x326	; 0x326 <motor_set_state>
	motor_set_state(M6, STOP);
     170:	60 e0       	ldi	r22, 0x00	; 0
     172:	86 e0       	ldi	r24, 0x06	; 6
     174:	0e 94 93 01 	call	0x326	; 0x326 <motor_set_state>
	motor_set_state(M7, STOP);
     178:	60 e0       	ldi	r22, 0x00	; 0
     17a:	87 e0       	ldi	r24, 0x07	; 7
     17c:	0e 94 93 01 	call	0x326	; 0x326 <motor_set_state>
	motor_set_pwm(M1, 0, 0x1ff);
	*/
	
	// Initializing variables
	int spe, motor_n, flag, rps;
	motor_n = 1;
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	9a 83       	std	Y+2, r25	; 0x02
     186:	89 83       	std	Y+1, r24	; 0x01
	printf("Motor number:\n"); // Ask for what motor you want to test.
     188:	8a e2       	ldi	r24, 0x2A	; 42
     18a:	91 e0       	ldi	r25, 0x01	; 1
     18c:	0e 94 30 03 	call	0x660	; 0x660 <puts>
	scanf("%d", &motor_n);
     190:	ce 01       	movw	r24, r28
     192:	01 96       	adiw	r24, 0x01	; 1
     194:	9f 93       	push	r25
     196:	8f 93       	push	r24
     198:	88 e3       	ldi	r24, 0x38	; 56
     19a:	91 e0       	ldi	r25, 0x01	; 1
     19c:	9f 93       	push	r25
     19e:	8f 93       	push	r24
     1a0:	0e 94 60 03 	call	0x6c0	; 0x6c0 <scanf>
     1a4:	0f 90       	pop	r0
     1a6:	0f 90       	pop	r0
     1a8:	0f 90       	pop	r0
     1aa:	0f 90       	pop	r0
		control_motor(motor_n, spe);
		*/
		
		// Sweeps through the speed values with increment of 50, when the user tells it to.
		printf("Start?\n");
		scanf("%d", &flag);
     1ac:	6e 01       	movw	r12, r28
     1ae:	83 e0       	ldi	r24, 0x03	; 3
     1b0:	c8 0e       	add	r12, r24
     1b2:	d1 1c       	adc	r13, r1
     1b4:	0f 2e       	mov	r0, r31
     1b6:	f8 e3       	ldi	r31, 0x38	; 56
     1b8:	ef 2e       	mov	r14, r31
     1ba:	f1 e0       	ldi	r31, 0x01	; 1
     1bc:	ff 2e       	mov	r15, r31
     1be:	f0 2d       	mov	r31, r0
		for(int i=0; i<3501; i+=50){
			if(i==0){i=1;}
			control_motor(motor_n, i);
			printf("Speed: %d\n", i);
     1c0:	0f 2e       	mov	r0, r31
     1c2:	f2 e4       	ldi	r31, 0x42	; 66
     1c4:	af 2e       	mov	r10, r31
     1c6:	f1 e0       	ldi	r31, 0x01	; 1
     1c8:	bf 2e       	mov	r11, r31
     1ca:	f0 2d       	mov	r31, r0
     1cc:	77 24       	eor	r7, r7
     1ce:	73 94       	inc	r7
			if(i==1){i=0;}
			scanf("%d", &flag);
		}
		control_motor(motor_n, 0);
		printf("Speed: 0");
     1d0:	0f 2e       	mov	r0, r31
     1d2:	fd e4       	ldi	r31, 0x4D	; 77
     1d4:	8f 2e       	mov	r8, r31
     1d6:	f1 e0       	ldi	r31, 0x01	; 1
     1d8:	9f 2e       	mov	r9, r31
     1da:	f0 2d       	mov	r31, r0
		// Runs motor (number: motor_n) with speed 'spe'
		control_motor(motor_n, spe);
		*/
		
		// Sweeps through the speed values with increment of 50, when the user tells it to.
		printf("Start?\n");
     1dc:	8b e3       	ldi	r24, 0x3B	; 59
     1de:	91 e0       	ldi	r25, 0x01	; 1
     1e0:	0e 94 30 03 	call	0x660	; 0x660 <puts>
		scanf("%d", &flag);
     1e4:	df 92       	push	r13
     1e6:	cf 92       	push	r12
     1e8:	ff 92       	push	r15
     1ea:	ef 92       	push	r14
     1ec:	0e 94 60 03 	call	0x6c0	; 0x6c0 <scanf>
     1f0:	0f 90       	pop	r0
     1f2:	0f 90       	pop	r0
     1f4:	0f 90       	pop	r0
     1f6:	0f 90       	pop	r0
		for(int i=0; i<3501; i+=50){
     1f8:	00 e0       	ldi	r16, 0x00	; 0
     1fa:	10 e0       	ldi	r17, 0x00	; 0
			if(i==0){i=1;}
     1fc:	01 15       	cp	r16, r1
     1fe:	11 05       	cpc	r17, r1
     200:	39 f1       	breq	.+78     	; 0x250 <main+0x13c>
			control_motor(motor_n, i);
     202:	b8 01       	movw	r22, r16
     204:	89 81       	ldd	r24, Y+1	; 0x01
     206:	0e 94 69 00 	call	0xd2	; 0xd2 <control_motor>
			printf("Speed: %d\n", i);
     20a:	1f 93       	push	r17
     20c:	0f 93       	push	r16
     20e:	bf 92       	push	r11
     210:	af 92       	push	r10
     212:	0e 94 1a 03 	call	0x634	; 0x634 <printf>
			if(i==1){i=0;}
			scanf("%d", &flag);
     216:	df 92       	push	r13
     218:	cf 92       	push	r12
     21a:	ff 92       	push	r15
     21c:	ef 92       	push	r14
     21e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <scanf>
		*/
		
		// Sweeps through the speed values with increment of 50, when the user tells it to.
		printf("Start?\n");
		scanf("%d", &flag);
		for(int i=0; i<3501; i+=50){
     222:	0e 5c       	subi	r16, 0xCE	; 206
     224:	1f 4f       	sbci	r17, 0xFF	; 255
     226:	0f b6       	in	r0, 0x3f	; 63
     228:	f8 94       	cli
     22a:	de bf       	out	0x3e, r29	; 62
     22c:	0f be       	out	0x3f, r0	; 63
     22e:	cd bf       	out	0x3d, r28	; 61
     230:	0d 3a       	cpi	r16, 0xAD	; 173
     232:	9d e0       	ldi	r25, 0x0D	; 13
     234:	19 07       	cpc	r17, r25
     236:	14 f3       	brlt	.-60     	; 0x1fc <main+0xe8>
			control_motor(motor_n, i);
			printf("Speed: %d\n", i);
			if(i==1){i=0;}
			scanf("%d", &flag);
		}
		control_motor(motor_n, 0);
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	70 e0       	ldi	r23, 0x00	; 0
     23c:	89 81       	ldd	r24, Y+1	; 0x01
     23e:	0e 94 69 00 	call	0xd2	; 0xd2 <control_motor>
		printf("Speed: 0");
     242:	9f 92       	push	r9
     244:	8f 92       	push	r8
     246:	0e 94 1a 03 	call	0x634	; 0x634 <printf>
			printf("Speed: %d\r", i);
			_delay_ms(250);
		}
		*/
		
	}
     24a:	0f 90       	pop	r0
     24c:	0f 90       	pop	r0
     24e:	c6 cf       	rjmp	.-116    	; 0x1dc <main+0xc8>
		// Sweeps through the speed values with increment of 50, when the user tells it to.
		printf("Start?\n");
		scanf("%d", &flag);
		for(int i=0; i<3501; i+=50){
			if(i==0){i=1;}
			control_motor(motor_n, i);
     250:	61 e0       	ldi	r22, 0x01	; 1
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	0e 94 69 00 	call	0xd2	; 0xd2 <control_motor>
			printf("Speed: %d\n", i);
     25a:	1f 92       	push	r1
     25c:	7f 92       	push	r7
     25e:	bf 92       	push	r11
     260:	af 92       	push	r10
     262:	0e 94 1a 03 	call	0x634	; 0x634 <printf>
			if(i==1){i=0;}
			scanf("%d", &flag);
     266:	df 92       	push	r13
     268:	cf 92       	push	r12
     26a:	ff 92       	push	r15
     26c:	ef 92       	push	r14
     26e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <scanf>
		*/
		
		// Sweeps through the speed values with increment of 50, when the user tells it to.
		printf("Start?\n");
		scanf("%d", &flag);
		for(int i=0; i<3501; i+=50){
     272:	02 e3       	ldi	r16, 0x32	; 50
     274:	10 e0       	ldi	r17, 0x00	; 0
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	f8 94       	cli
     27a:	de bf       	out	0x3e, r29	; 62
     27c:	0f be       	out	0x3f, r0	; 63
     27e:	cd bf       	out	0x3d, r28	; 61
     280:	bd cf       	rjmp	.-134    	; 0x1fc <main+0xe8>

00000282 <motor_set8574_controlpin>:
#include "i2cmaster.h"

void motor_set8574_controlpin(unsigned char bit_number, unsigned char level)
{
	static unsigned char out_byte = 0;
	if(level == LOW)
     282:	61 11       	cpse	r22, r1
     284:	10 c0       	rjmp	.+32     	; 0x2a6 <motor_set8574_controlpin+0x24>
		out_byte &= ~(1<<bit_number);
     286:	21 e0       	ldi	r18, 0x01	; 1
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	a9 01       	movw	r20, r18
     28c:	02 c0       	rjmp	.+4      	; 0x292 <motor_set8574_controlpin+0x10>
     28e:	44 0f       	add	r20, r20
     290:	55 1f       	adc	r21, r21
     292:	8a 95       	dec	r24
     294:	e2 f7       	brpl	.-8      	; 0x28e <motor_set8574_controlpin+0xc>
     296:	ca 01       	movw	r24, r20
     298:	80 95       	com	r24
     29a:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <__data_end>
     29e:	89 23       	and	r24, r25
     2a0:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
     2a4:	10 c0       	rjmp	.+32     	; 0x2c6 <motor_set8574_controlpin+0x44>
	if(level==HIGH)
     2a6:	61 30       	cpi	r22, 0x01	; 1
     2a8:	71 f4       	brne	.+28     	; 0x2c6 <motor_set8574_controlpin+0x44>
		out_byte |= (1<<bit_number);
     2aa:	21 e0       	ldi	r18, 0x01	; 1
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	a9 01       	movw	r20, r18
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <motor_set8574_controlpin+0x34>
     2b2:	44 0f       	add	r20, r20
     2b4:	55 1f       	adc	r21, r21
     2b6:	8a 95       	dec	r24
     2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <motor_set8574_controlpin+0x30>
     2ba:	ca 01       	movw	r24, r20
     2bc:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <__data_end>
     2c0:	89 2b       	or	r24, r25
     2c2:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
	i2c_start(PCF8574_ADR + I2C_WRITE);
     2c6:	80 e7       	ldi	r24, 0x70	; 112
     2c8:	0e 94 9e 02 	call	0x53c	; 0x53c <i2c_start>
	i2c_write(out_byte);
     2cc:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end>
     2d0:	0e 94 ce 02 	call	0x59c	; 0x59c <i2c_write>
	i2c_stop();
     2d4:	0e 94 c5 02 	call	0x58a	; 0x58a <i2c_stop>
     2d8:	08 95       	ret

000002da <motor_set1438_controlpin>:
}


void motor_set1438_controlpin(unsigned char pin_adr, unsigned char level)
{
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	d8 2f       	mov	r29, r24
     2e0:	c6 2f       	mov	r28, r22
	i2c_start(PCA_ADR + I2C_WRITE);
     2e2:	80 ec       	ldi	r24, 0xC0	; 192
     2e4:	0e 94 9e 02 	call	0x53c	; 0x53c <i2c_start>
	i2c_write(pin_adr);
     2e8:	8d 2f       	mov	r24, r29
     2ea:	0e 94 ce 02 	call	0x59c	; 0x59c <i2c_write>
	if(level == LOW)
     2ee:	c1 11       	cpse	r28, r1
     2f0:	0a c0       	rjmp	.+20     	; 0x306 <motor_set1438_controlpin+0x2c>
	{
		i2c_write(0x00); i2c_write(0x00); i2c_write(0x10);
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	0e 94 ce 02 	call	0x59c	; 0x59c <i2c_write>
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	0e 94 ce 02 	call	0x59c	; 0x59c <i2c_write>
     2fe:	80 e1       	ldi	r24, 0x10	; 16
     300:	0e 94 ce 02 	call	0x59c	; 0x59c <i2c_write>
     304:	0b c0       	rjmp	.+22     	; 0x31c <motor_set1438_controlpin+0x42>
	}
	if(level==HIGH)
     306:	c1 30       	cpi	r28, 0x01	; 1
     308:	49 f4       	brne	.+18     	; 0x31c <motor_set1438_controlpin+0x42>
	{
		i2c_write(0x10); i2c_write(0x00); i2c_write(0x00);
     30a:	80 e1       	ldi	r24, 0x10	; 16
     30c:	0e 94 ce 02 	call	0x59c	; 0x59c <i2c_write>
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	0e 94 ce 02 	call	0x59c	; 0x59c <i2c_write>
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	0e 94 ce 02 	call	0x59c	; 0x59c <i2c_write>
	}
	i2c_stop();
     31c:	0e 94 c5 02 	call	0x58a	; 0x58a <i2c_stop>
}
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	08 95       	ret

00000326 <motor_set_state>:

void motor_set_state(unsigned char motor_number, unsigned char state)
{
     326:	cf 93       	push	r28
     328:	96 2f       	mov	r25, r22
	unsigned char in1=0, in2=0;
	
	switch(motor_number)
     32a:	48 2f       	mov	r20, r24
     32c:	50 e0       	ldi	r21, 0x00	; 0
     32e:	fa 01       	movw	r30, r20
     330:	31 97       	sbiw	r30, 0x01	; 1
     332:	e8 30       	cpi	r30, 0x08	; 8
     334:	f1 05       	cpc	r31, r1
     336:	80 f4       	brcc	.+32     	; 0x358 <motor_set_state+0x32>
     338:	ec 5c       	subi	r30, 0xCC	; 204
     33a:	ff 4f       	sbci	r31, 0xFF	; 255
     33c:	0c 94 14 03 	jmp	0x628	; 0x628 <__tablejump2__>
		case M1:	in1=M1_IN1+1; in2=M1_IN2+1; break; // High byte of reg
		case M2: 	in1=M2_IN1+1; in2=M2_IN2+1; break; // High byte of reg
		case M3:	in1=M3_IN1+1; in2=M3_IN2+1; break; // High byte of reg
		case M4:	in1=M4_IN1+1; in2=M4_IN2+1; break; // High byte of reg
		case M5:	in1=M5_IN1; in2=M5_IN2; break;		// Set bit position
		case M6:	in1=M6_IN1; in2=M6_IN2; break;		// Set bit position
     340:	c3 e0       	ldi	r28, 0x03	; 3
     342:	82 e0       	ldi	r24, 0x02	; 2
     344:	36 c0       	rjmp	.+108    	; 0x3b2 <motor_set_state+0x8c>
	unsigned char in1=0, in2=0;
	
	switch(motor_number)
	{
		case M1:	in1=M1_IN1+1; in2=M1_IN2+1; break; // High byte of reg
		case M2: 	in1=M2_IN1+1; in2=M2_IN2+1; break; // High byte of reg
     346:	c7 e3       	ldi	r28, 0x37	; 55
     348:	83 e3       	ldi	r24, 0x33	; 51
     34a:	0a c0       	rjmp	.+20     	; 0x360 <motor_set_state+0x3a>
		case M3:	in1=M3_IN1+1; in2=M3_IN2+1; break; // High byte of reg
		case M4:	in1=M4_IN1+1; in2=M4_IN2+1; break; // High byte of reg
     34c:	cf e1       	ldi	r28, 0x1F	; 31
     34e:	8b e1       	ldi	r24, 0x1B	; 27
     350:	07 c0       	rjmp	.+14     	; 0x360 <motor_set_state+0x3a>
		case M5:	in1=M5_IN1; in2=M5_IN2; break;		// Set bit position
		case M6:	in1=M6_IN1; in2=M6_IN2; break;		// Set bit position
		case M7:	in1=M7_IN1; in2=M7_IN2; break;		// Set bit position
		case M8:	in1=M8_IN1; in2=M8_IN2; break;		// Set bit position
     352:	c7 e0       	ldi	r28, 0x07	; 7
     354:	86 e0       	ldi	r24, 0x06	; 6
     356:	2d c0       	rjmp	.+90     	; 0x3b2 <motor_set_state+0x8c>
	}
	if(motor_number < 5)			// M1 - M4
     358:	85 30       	cpi	r24, 0x05	; 5
     35a:	48 f5       	brcc	.+82     	; 0x3ae <motor_set_state+0x88>
	i2c_stop();
}

void motor_set_state(unsigned char motor_number, unsigned char state)
{
	unsigned char in1=0, in2=0;
     35c:	c0 e0       	ldi	r28, 0x00	; 0
     35e:	80 e0       	ldi	r24, 0x00	; 0
		case M7:	in1=M7_IN1; in2=M7_IN2; break;		// Set bit position
		case M8:	in1=M8_IN1; in2=M8_IN2; break;		// Set bit position
	}
	if(motor_number < 5)			// M1 - M4
	{
		switch(state)
     360:	92 30       	cpi	r25, 0x02	; 2
     362:	29 f0       	breq	.+10     	; 0x36e <motor_set_state+0x48>
     364:	93 30       	cpi	r25, 0x03	; 3
     366:	99 f0       	breq	.+38     	; 0x38e <motor_set_state+0x68>
     368:	91 30       	cpi	r25, 0x01	; 1
     36a:	c9 f4       	brne	.+50     	; 0x39e <motor_set_state+0x78>
     36c:	08 c0       	rjmp	.+16     	; 0x37e <motor_set_state+0x58>
		{
		
			case CCW:		motor_set1438_controlpin(in1, LOW); motor_set1438_controlpin(in2, HIGH); break;  // IN1=0, IN2=1
     36e:	60 e0       	ldi	r22, 0x00	; 0
     370:	0e 94 6d 01 	call	0x2da	; 0x2da <motor_set1438_controlpin>
     374:	61 e0       	ldi	r22, 0x01	; 1
     376:	8c 2f       	mov	r24, r28
     378:	0e 94 6d 01 	call	0x2da	; 0x2da <motor_set1438_controlpin>
     37c:	4d c0       	rjmp	.+154    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			case CW:		motor_set1438_controlpin(in1, HIGH); motor_set1438_controlpin(in2, LOW); break;	// IN1=1, IN2=0
     37e:	61 e0       	ldi	r22, 0x01	; 1
     380:	0e 94 6d 01 	call	0x2da	; 0x2da <motor_set1438_controlpin>
     384:	60 e0       	ldi	r22, 0x00	; 0
     386:	8c 2f       	mov	r24, r28
     388:	0e 94 6d 01 	call	0x2da	; 0x2da <motor_set1438_controlpin>
     38c:	45 c0       	rjmp	.+138    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			case BRAKE:		motor_set1438_controlpin(in1, HIGH); motor_set1438_controlpin(in2, HIGH);break;	// IN1=1, IN2=1
     38e:	61 e0       	ldi	r22, 0x01	; 1
     390:	0e 94 6d 01 	call	0x2da	; 0x2da <motor_set1438_controlpin>
     394:	61 e0       	ldi	r22, 0x01	; 1
     396:	8c 2f       	mov	r24, r28
     398:	0e 94 6d 01 	call	0x2da	; 0x2da <motor_set1438_controlpin>
     39c:	3d c0       	rjmp	.+122    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			case STOP:
			default:		motor_set1438_controlpin(in1, LOW); motor_set1438_controlpin(in2, LOW);	// IN1=0, IN2=0
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	0e 94 6d 01 	call	0x2da	; 0x2da <motor_set1438_controlpin>
     3a4:	60 e0       	ldi	r22, 0x00	; 0
     3a6:	8c 2f       	mov	r24, r28
     3a8:	0e 94 6d 01 	call	0x2da	; 0x2da <motor_set1438_controlpin>
     3ac:	35 c0       	rjmp	.+106    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	i2c_stop();
}

void motor_set_state(unsigned char motor_number, unsigned char state)
{
	unsigned char in1=0, in2=0;
     3ae:	c0 e0       	ldi	r28, 0x00	; 0
     3b0:	80 e0       	ldi	r24, 0x00	; 0
			default:		motor_set1438_controlpin(in1, LOW); motor_set1438_controlpin(in2, LOW);	// IN1=0, IN2=0
		}
	}
	else							// M5 - M8
	{
		switch(state)
     3b2:	92 30       	cpi	r25, 0x02	; 2
     3b4:	29 f0       	breq	.+10     	; 0x3c0 <motor_set_state+0x9a>
     3b6:	93 30       	cpi	r25, 0x03	; 3
     3b8:	99 f0       	breq	.+38     	; 0x3e0 <motor_set_state+0xba>
     3ba:	91 30       	cpi	r25, 0x01	; 1
     3bc:	c9 f4       	brne	.+50     	; 0x3f0 <motor_set_state+0xca>
     3be:	08 c0       	rjmp	.+16     	; 0x3d0 <motor_set_state+0xaa>
		{
			case CCW:		motor_set8574_controlpin(in1, LOW); motor_set8574_controlpin(in2, HIGH); break;  // IN1=0, IN2=1
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	0e 94 41 01 	call	0x282	; 0x282 <motor_set8574_controlpin>
     3c6:	61 e0       	ldi	r22, 0x01	; 1
     3c8:	8c 2f       	mov	r24, r28
     3ca:	0e 94 41 01 	call	0x282	; 0x282 <motor_set8574_controlpin>
     3ce:	24 c0       	rjmp	.+72     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			case CW:		motor_set8574_controlpin(in1, HIGH); motor_set8574_controlpin(in2, LOW); break;	// IN1=1, IN2=0
     3d0:	61 e0       	ldi	r22, 0x01	; 1
     3d2:	0e 94 41 01 	call	0x282	; 0x282 <motor_set8574_controlpin>
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	8c 2f       	mov	r24, r28
     3da:	0e 94 41 01 	call	0x282	; 0x282 <motor_set8574_controlpin>
     3de:	1c c0       	rjmp	.+56     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			case BRAKE:		motor_set8574_controlpin(in1, HIGH); motor_set8574_controlpin(in2, HIGH);break;	// IN1=1, IN2=1
     3e0:	61 e0       	ldi	r22, 0x01	; 1
     3e2:	0e 94 41 01 	call	0x282	; 0x282 <motor_set8574_controlpin>
     3e6:	61 e0       	ldi	r22, 0x01	; 1
     3e8:	8c 2f       	mov	r24, r28
     3ea:	0e 94 41 01 	call	0x282	; 0x282 <motor_set8574_controlpin>
     3ee:	14 c0       	rjmp	.+40     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			case STOP:
			default:		motor_set8574_controlpin(in1, LOW); motor_set8574_controlpin(in2, LOW);	// IN1=0, IN2=0
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	0e 94 41 01 	call	0x282	; 0x282 <motor_set8574_controlpin>
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	8c 2f       	mov	r24, r28
     3fa:	0e 94 41 01 	call	0x282	; 0x282 <motor_set8574_controlpin>
		}
	}
}
     3fe:	0c c0       	rjmp	.+24     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	{
		case M1:	in1=M1_IN1+1; in2=M1_IN2+1; break; // High byte of reg
		case M2: 	in1=M2_IN1+1; in2=M2_IN2+1; break; // High byte of reg
		case M3:	in1=M3_IN1+1; in2=M3_IN2+1; break; // High byte of reg
		case M4:	in1=M4_IN1+1; in2=M4_IN2+1; break; // High byte of reg
		case M5:	in1=M5_IN1; in2=M5_IN2; break;		// Set bit position
     400:	c1 e0       	ldi	r28, 0x01	; 1
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	d6 cf       	rjmp	.-84     	; 0x3b2 <motor_set_state+0x8c>
		case M6:	in1=M6_IN1; in2=M6_IN2; break;		// Set bit position
		case M7:	in1=M7_IN1; in2=M7_IN2; break;		// Set bit position
     406:	c5 e0       	ldi	r28, 0x05	; 5
     408:	84 e0       	ldi	r24, 0x04	; 4
     40a:	d3 cf       	rjmp	.-90     	; 0x3b2 <motor_set_state+0x8c>
{
	unsigned char in1=0, in2=0;
	
	switch(motor_number)
	{
		case M1:	in1=M1_IN1+1; in2=M1_IN2+1; break; // High byte of reg
     40c:	cb e2       	ldi	r28, 0x2B	; 43
     40e:	8f e2       	ldi	r24, 0x2F	; 47
     410:	a7 cf       	rjmp	.-178    	; 0x360 <motor_set_state+0x3a>
		case M2: 	in1=M2_IN1+1; in2=M2_IN2+1; break; // High byte of reg
		case M3:	in1=M3_IN1+1; in2=M3_IN2+1; break; // High byte of reg
     412:	c3 e1       	ldi	r28, 0x13	; 19
     414:	87 e1       	ldi	r24, 0x17	; 23
     416:	a4 cf       	rjmp	.-184    	; 0x360 <motor_set_state+0x3a>
			case BRAKE:		motor_set8574_controlpin(in1, HIGH); motor_set8574_controlpin(in2, HIGH);break;	// IN1=1, IN2=1
			case STOP:
			default:		motor_set8574_controlpin(in1, LOW); motor_set8574_controlpin(in2, LOW);	// IN1=0, IN2=0
		}
	}
}
     418:	cf 91       	pop	r28
     41a:	08 95       	ret

0000041c <motor_set_pwm>:

void motor_set_pwm(unsigned char motor_number, unsigned int on_value, unsigned int off_value)
{
     41c:	ff 92       	push	r15
     41e:	0f 93       	push	r16
     420:	1f 93       	push	r17
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	8b 01       	movw	r16, r22
     428:	ea 01       	movw	r28, r20
	unsigned char pwm_reg=0;
	if(on_value > 0xFFF) on_value = 0;
     42a:	61 15       	cp	r22, r1
     42c:	70 41       	sbci	r23, 0x10	; 16
     42e:	10 f0       	brcs	.+4      	; 0x434 <motor_set_pwm+0x18>
     430:	00 e0       	ldi	r16, 0x00	; 0
     432:	10 e0       	ldi	r17, 0x00	; 0
	if(off_value > 0xFFF) off_value = 0;
     434:	c1 15       	cp	r28, r1
     436:	90 e1       	ldi	r25, 0x10	; 16
     438:	d9 07       	cpc	r29, r25
     43a:	10 f0       	brcs	.+4      	; 0x440 <motor_set_pwm+0x24>
     43c:	c0 e0       	ldi	r28, 0x00	; 0
     43e:	d0 e0       	ldi	r29, 0x00	; 0
	
	switch(motor_number)
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	fc 01       	movw	r30, r24
     444:	31 97       	sbiw	r30, 0x01	; 1
     446:	e8 30       	cpi	r30, 0x08	; 8
     448:	f1 05       	cpc	r31, r1
     44a:	60 f5       	brcc	.+88     	; 0x4a4 <motor_set_pwm+0x88>
     44c:	e4 5c       	subi	r30, 0xC4	; 196
     44e:	ff 4f       	sbci	r31, 0xFF	; 255
     450:	0c 94 14 03 	jmp	0x628	; 0x628 <__tablejump2__>
	{
		case M1:	pwm_reg = M1_PWM; break;
     454:	0f 2e       	mov	r0, r31
     456:	f6 e2       	ldi	r31, 0x26	; 38
     458:	ff 2e       	mov	r15, r31
     45a:	f0 2d       	mov	r31, r0
     45c:	24 c0       	rjmp	.+72     	; 0x4a6 <motor_set_pwm+0x8a>
		case M2:	pwm_reg = M2_PWM; break;
     45e:	0f 2e       	mov	r0, r31
     460:	fa e3       	ldi	r31, 0x3A	; 58
     462:	ff 2e       	mov	r15, r31
     464:	f0 2d       	mov	r31, r0
     466:	1f c0       	rjmp	.+62     	; 0x4a6 <motor_set_pwm+0x8a>
		case M3:	pwm_reg = M3_PWM; break;
     468:	0f 2e       	mov	r0, r31
     46a:	fe e0       	ldi	r31, 0x0E	; 14
     46c:	ff 2e       	mov	r15, r31
     46e:	f0 2d       	mov	r31, r0
     470:	1a c0       	rjmp	.+52     	; 0x4a6 <motor_set_pwm+0x8a>
		case M4:	pwm_reg = M4_PWM; break;
     472:	0f 2e       	mov	r0, r31
     474:	f2 e2       	ldi	r31, 0x22	; 34
     476:	ff 2e       	mov	r15, r31
     478:	f0 2d       	mov	r31, r0
     47a:	15 c0       	rjmp	.+42     	; 0x4a6 <motor_set_pwm+0x8a>
		case M5:	pwm_reg = M5_PWM; break;
     47c:	0f 2e       	mov	r0, r31
     47e:	f6 e0       	ldi	r31, 0x06	; 6
     480:	ff 2e       	mov	r15, r31
     482:	f0 2d       	mov	r31, r0
     484:	10 c0       	rjmp	.+32     	; 0x4a6 <motor_set_pwm+0x8a>
		case M6:	pwm_reg = M6_PWM; break;
     486:	0f 2e       	mov	r0, r31
     488:	fa e0       	ldi	r31, 0x0A	; 10
     48a:	ff 2e       	mov	r15, r31
     48c:	f0 2d       	mov	r31, r0
     48e:	0b c0       	rjmp	.+22     	; 0x4a6 <motor_set_pwm+0x8a>
		case M7:	pwm_reg = M7_PWM; break;
     490:	0f 2e       	mov	r0, r31
     492:	fe e3       	ldi	r31, 0x3E	; 62
     494:	ff 2e       	mov	r15, r31
     496:	f0 2d       	mov	r31, r0
     498:	06 c0       	rjmp	.+12     	; 0x4a6 <motor_set_pwm+0x8a>
		case M8:	pwm_reg = M8_PWM; break;
     49a:	0f 2e       	mov	r0, r31
     49c:	f2 e4       	ldi	r31, 0x42	; 66
     49e:	ff 2e       	mov	r15, r31
     4a0:	f0 2d       	mov	r31, r0
     4a2:	01 c0       	rjmp	.+2      	; 0x4a6 <motor_set_pwm+0x8a>
	}
}

void motor_set_pwm(unsigned char motor_number, unsigned int on_value, unsigned int off_value)
{
	unsigned char pwm_reg=0;
     4a4:	f1 2c       	mov	r15, r1
		case M5:	pwm_reg = M5_PWM; break;
		case M6:	pwm_reg = M6_PWM; break;
		case M7:	pwm_reg = M7_PWM; break;
		case M8:	pwm_reg = M8_PWM; break;
	}
	i2c_start(PCA_ADR + I2C_WRITE);
     4a6:	80 ec       	ldi	r24, 0xC0	; 192
     4a8:	0e 94 9e 02 	call	0x53c	; 0x53c <i2c_start>
	i2c_write(pwm_reg);
     4ac:	8f 2d       	mov	r24, r15
     4ae:	0e 94 ce 02 	call	0x59c	; 0x59c <i2c_write>
	i2c_write(on_value&0x0FF);
     4b2:	80 2f       	mov	r24, r16
     4b4:	0e 94 ce 02 	call	0x59c	; 0x59c <i2c_write>
	on_value >>= 8;
	i2c_write(on_value);
     4b8:	81 2f       	mov	r24, r17
     4ba:	0e 94 ce 02 	call	0x59c	; 0x59c <i2c_write>
	i2c_write(off_value & 0x0FF);
     4be:	8c 2f       	mov	r24, r28
     4c0:	0e 94 ce 02 	call	0x59c	; 0x59c <i2c_write>
	off_value >>= 8;
	i2c_write(off_value);
     4c4:	8d 2f       	mov	r24, r29
     4c6:	0e 94 ce 02 	call	0x59c	; 0x59c <i2c_write>
	i2c_stop();
     4ca:	0e 94 c5 02 	call	0x58a	; 0x58a <i2c_stop>
}
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	1f 91       	pop	r17
     4d4:	0f 91       	pop	r16
     4d6:	ff 90       	pop	r15
     4d8:	08 95       	ret

000004da <motor_init_pwm>:

void motor_init_pwm(unsigned char frequency)  // INIT PCA9685 AND PCA8574
{
     4da:	cf 93       	push	r28
     4dc:	c8 2f       	mov	r28, r24
	i2c_start(PCA_ADR + I2C_WRITE);
     4de:	80 ec       	ldi	r24, 0xC0	; 192
     4e0:	0e 94 9e 02 	call	0x53c	; 0x53c <i2c_start>
	i2c_write(0x00);
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	0e 94 ce 02 	call	0x59c	; 0x59c <i2c_write>
	i2c_write(0b00110000);					// sleep and autoinc
     4ea:	80 e3       	ldi	r24, 0x30	; 48
     4ec:	0e 94 ce 02 	call	0x59c	; 0x59c <i2c_write>
	i2c_stop();
     4f0:	0e 94 c5 02 	call	0x58a	; 0x58a <i2c_stop>
	
	i2c_start(PCA_ADR + I2C_WRITE);
     4f4:	80 ec       	ldi	r24, 0xC0	; 192
     4f6:	0e 94 9e 02 	call	0x53c	; 0x53c <i2c_start>
	i2c_write(0xFE);
     4fa:	8e ef       	ldi	r24, 0xFE	; 254
     4fc:	0e 94 ce 02 	call	0x59c	; 0x59c <i2c_write>
	i2c_write(frequency);						
     500:	8c 2f       	mov	r24, r28
     502:	0e 94 ce 02 	call	0x59c	; 0x59c <i2c_write>
	
	i2c_start(PCA_ADR + I2C_WRITE);
     506:	80 ec       	ldi	r24, 0xC0	; 192
     508:	0e 94 9e 02 	call	0x53c	; 0x53c <i2c_start>
	i2c_write(0x00);
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	0e 94 ce 02 	call	0x59c	; 0x59c <i2c_write>
	i2c_write(0b00100000);					// autoinc
     512:	80 e2       	ldi	r24, 0x20	; 32
     514:	0e 94 ce 02 	call	0x59c	; 0x59c <i2c_write>
	i2c_stop();	
     518:	0e 94 c5 02 	call	0x58a	; 0x58a <i2c_stop>
	
	i2c_start(PCF8574_ADR + I2C_WRITE);		// All PCF8574 outputs low
     51c:	80 e7       	ldi	r24, 0x70	; 112
     51e:	0e 94 9e 02 	call	0x53c	; 0x53c <i2c_start>
	i2c_write(0x00);
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	0e 94 ce 02 	call	0x59c	; 0x59c <i2c_write>
	i2c_stop();
     528:	0e 94 c5 02 	call	0x58a	; 0x58a <i2c_stop>
     52c:	cf 91       	pop	r28
     52e:	08 95       	ret

00000530 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     530:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     534:	8c e0       	ldi	r24, 0x0C	; 12
     536:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     53a:	08 95       	ret

0000053c <i2c_start>:
     53c:	94 ea       	ldi	r25, 0xA4	; 164
     53e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     542:	ec eb       	ldi	r30, 0xBC	; 188
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	90 81       	ld	r25, Z
     548:	99 23       	and	r25, r25
     54a:	ec f7       	brge	.-6      	; 0x546 <i2c_start+0xa>
     54c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     550:	98 7f       	andi	r25, 0xF8	; 248
     552:	98 30       	cpi	r25, 0x08	; 8
     554:	11 f0       	breq	.+4      	; 0x55a <i2c_start+0x1e>
     556:	90 31       	cpi	r25, 0x10	; 16
     558:	a1 f4       	brne	.+40     	; 0x582 <i2c_start+0x46>
     55a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
     55e:	84 e8       	ldi	r24, 0x84	; 132
     560:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     564:	ec eb       	ldi	r30, 0xBC	; 188
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	80 81       	ld	r24, Z
     56a:	88 23       	and	r24, r24
     56c:	ec f7       	brge	.-6      	; 0x568 <i2c_start+0x2c>
     56e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     572:	98 7f       	andi	r25, 0xF8	; 248
     574:	98 31       	cpi	r25, 0x18	; 24
     576:	39 f0       	breq	.+14     	; 0x586 <i2c_start+0x4a>
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	90 34       	cpi	r25, 0x40	; 64
     57c:	29 f4       	brne	.+10     	; 0x588 <i2c_start+0x4c>
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	08 95       	ret
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	08 95       	ret
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	08 95       	ret

0000058a <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     58a:	84 e9       	ldi	r24, 0x94	; 148
     58c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     590:	ec eb       	ldi	r30, 0xBC	; 188
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	80 81       	ld	r24, Z
     596:	84 fd       	sbrc	r24, 4
     598:	fd cf       	rjmp	.-6      	; 0x594 <i2c_stop+0xa>

}/* i2c_stop */
     59a:	08 95       	ret

0000059c <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     59c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
     5a0:	84 e8       	ldi	r24, 0x84	; 132
     5a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     5a6:	ec eb       	ldi	r30, 0xBC	; 188
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	80 81       	ld	r24, Z
     5ac:	88 23       	and	r24, r24
     5ae:	ec f7       	brge	.-6      	; 0x5aa <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     5b0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     5b4:	98 7f       	andi	r25, 0xF8	; 248
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	98 32       	cpi	r25, 0x28	; 40
     5ba:	09 f4       	brne	.+2      	; 0x5be <i2c_write+0x22>
     5bc:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     5be:	08 95       	ret

000005c0 <uart_putchar>:
		stdout = &uart_output;	//redirect standard output to uart
		stdin  = &uart_input;  //redirect standard input to uart
}
	

void uart_putchar(char c, FILE *stream) {
     5c0:	cf 93       	push	r28
     5c2:	c8 2f       	mov	r28, r24
	if (c == '\n') {
     5c4:	8a 30       	cpi	r24, 0x0A	; 10
     5c6:	19 f4       	brne	.+6      	; 0x5ce <uart_putchar+0xe>
		uart_putchar('\r', stream);
     5c8:	8d e0       	ldi	r24, 0x0D	; 13
     5ca:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
     5ce:	e0 ec       	ldi	r30, 0xC0	; 192
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	80 81       	ld	r24, Z
     5d4:	85 ff       	sbrs	r24, 5
     5d6:	fd cf       	rjmp	.-6      	; 0x5d2 <uart_putchar+0x12>
	UDR0 = c;
     5d8:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
     5dc:	cf 91       	pop	r28
     5de:	08 95       	ret

000005e0 <uart_getchar>:

char uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0);
     5e0:	e0 ec       	ldi	r30, 0xC0	; 192
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	80 81       	ld	r24, Z
     5e6:	88 23       	and	r24, r24
     5e8:	ec f7       	brge	.-6      	; 0x5e4 <uart_getchar+0x4>
	return UDR0;
     5ea:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     5ee:	08 95       	ret

000005f0 <uart_init>:
FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);


void uart_init(void) {
	
	UBRR0H = UBRRH_VALUE;
     5f0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = UBRRL_VALUE;
     5f4:	87 e6       	ldi	r24, 0x67	; 103
     5f6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	
	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
     5fa:	e0 ec       	ldi	r30, 0xC0	; 192
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	80 81       	ld	r24, Z
     600:	8d 7f       	andi	r24, 0xFD	; 253
     602:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
     604:	86 e0       	ldi	r24, 0x06	; 6
     606:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
     60a:	88 e1       	ldi	r24, 0x18	; 24
     60c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     610:	08 95       	ret

00000612 <io_redirect>:
}

void io_redirect(void ){
		
		
		stdout = &uart_output;	//redirect standard output to uart
     612:	e7 e5       	ldi	r30, 0x57	; 87
     614:	f1 e0       	ldi	r31, 0x01	; 1
     616:	8e e0       	ldi	r24, 0x0E	; 14
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	93 83       	std	Z+3, r25	; 0x03
     61c:	82 83       	std	Z+2, r24	; 0x02
		stdin  = &uart_input;  //redirect standard input to uart
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	91 83       	std	Z+1, r25	; 0x01
     624:	80 83       	st	Z, r24
     626:	08 95       	ret

00000628 <__tablejump2__>:
     628:	ee 0f       	add	r30, r30
     62a:	ff 1f       	adc	r31, r31
     62c:	05 90       	lpm	r0, Z+
     62e:	f4 91       	lpm	r31, Z
     630:	e0 2d       	mov	r30, r0
     632:	09 94       	ijmp

00000634 <printf>:
     634:	a0 e0       	ldi	r26, 0x00	; 0
     636:	b0 e0       	ldi	r27, 0x00	; 0
     638:	e0 e2       	ldi	r30, 0x20	; 32
     63a:	f3 e0       	ldi	r31, 0x03	; 3
     63c:	0c 94 32 09 	jmp	0x1264	; 0x1264 <__prologue_saves__+0x20>
     640:	ae 01       	movw	r20, r28
     642:	4b 5f       	subi	r20, 0xFB	; 251
     644:	5f 4f       	sbci	r21, 0xFF	; 255
     646:	fa 01       	movw	r30, r20
     648:	61 91       	ld	r22, Z+
     64a:	71 91       	ld	r23, Z+
     64c:	af 01       	movw	r20, r30
     64e:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <__iob+0x2>
     652:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <__iob+0x3>
     656:	0e 94 76 03 	call	0x6ec	; 0x6ec <vfprintf>
     65a:	e2 e0       	ldi	r30, 0x02	; 2
     65c:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__epilogue_restores__+0x20>

00000660 <puts>:
     660:	0f 93       	push	r16
     662:	1f 93       	push	r17
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <__iob+0x2>
     66c:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <__iob+0x3>
     670:	23 81       	ldd	r18, Z+3	; 0x03
     672:	21 ff       	sbrs	r18, 1
     674:	1b c0       	rjmp	.+54     	; 0x6ac <puts+0x4c>
     676:	8c 01       	movw	r16, r24
     678:	d0 e0       	ldi	r29, 0x00	; 0
     67a:	c0 e0       	ldi	r28, 0x00	; 0
     67c:	f8 01       	movw	r30, r16
     67e:	81 91       	ld	r24, Z+
     680:	8f 01       	movw	r16, r30
     682:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <__iob+0x2>
     686:	70 91 5a 01 	lds	r23, 0x015A	; 0x80015a <__iob+0x3>
     68a:	db 01       	movw	r26, r22
     68c:	18 96       	adiw	r26, 0x08	; 8
     68e:	ed 91       	ld	r30, X+
     690:	fc 91       	ld	r31, X
     692:	19 97       	sbiw	r26, 0x09	; 9
     694:	88 23       	and	r24, r24
     696:	31 f0       	breq	.+12     	; 0x6a4 <puts+0x44>
     698:	09 95       	icall
     69a:	89 2b       	or	r24, r25
     69c:	79 f3       	breq	.-34     	; 0x67c <puts+0x1c>
     69e:	df ef       	ldi	r29, 0xFF	; 255
     6a0:	cf ef       	ldi	r28, 0xFF	; 255
     6a2:	ec cf       	rjmp	.-40     	; 0x67c <puts+0x1c>
     6a4:	8a e0       	ldi	r24, 0x0A	; 10
     6a6:	09 95       	icall
     6a8:	89 2b       	or	r24, r25
     6aa:	19 f0       	breq	.+6      	; 0x6b2 <puts+0x52>
     6ac:	8f ef       	ldi	r24, 0xFF	; 255
     6ae:	9f ef       	ldi	r25, 0xFF	; 255
     6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <puts+0x56>
     6b2:	8d 2f       	mov	r24, r29
     6b4:	9c 2f       	mov	r25, r28
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	1f 91       	pop	r17
     6bc:	0f 91       	pop	r16
     6be:	08 95       	ret

000006c0 <scanf>:
     6c0:	a0 e0       	ldi	r26, 0x00	; 0
     6c2:	b0 e0       	ldi	r27, 0x00	; 0
     6c4:	e6 e6       	ldi	r30, 0x66	; 102
     6c6:	f3 e0       	ldi	r31, 0x03	; 3
     6c8:	0c 94 32 09 	jmp	0x1264	; 0x1264 <__prologue_saves__+0x20>
     6cc:	ae 01       	movw	r20, r28
     6ce:	4b 5f       	subi	r20, 0xFB	; 251
     6d0:	5f 4f       	sbci	r21, 0xFF	; 255
     6d2:	fa 01       	movw	r30, r20
     6d4:	61 91       	ld	r22, Z+
     6d6:	71 91       	ld	r23, Z+
     6d8:	af 01       	movw	r20, r30
     6da:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <__iob>
     6de:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <__iob+0x1>
     6e2:	0e 94 f3 06 	call	0xde6	; 0xde6 <vfscanf>
     6e6:	e2 e0       	ldi	r30, 0x02	; 2
     6e8:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__epilogue_restores__+0x20>

000006ec <vfprintf>:
     6ec:	ab e0       	ldi	r26, 0x0B	; 11
     6ee:	b0 e0       	ldi	r27, 0x00	; 0
     6f0:	ec e7       	ldi	r30, 0x7C	; 124
     6f2:	f3 e0       	ldi	r31, 0x03	; 3
     6f4:	0c 94 22 09 	jmp	0x1244	; 0x1244 <__prologue_saves__>
     6f8:	6c 01       	movw	r12, r24
     6fa:	7b 01       	movw	r14, r22
     6fc:	8a 01       	movw	r16, r20
     6fe:	fc 01       	movw	r30, r24
     700:	17 82       	std	Z+7, r1	; 0x07
     702:	16 82       	std	Z+6, r1	; 0x06
     704:	83 81       	ldd	r24, Z+3	; 0x03
     706:	81 ff       	sbrs	r24, 1
     708:	cc c1       	rjmp	.+920    	; 0xaa2 <__stack+0x1a3>
     70a:	ce 01       	movw	r24, r28
     70c:	01 96       	adiw	r24, 0x01	; 1
     70e:	3c 01       	movw	r6, r24
     710:	f6 01       	movw	r30, r12
     712:	93 81       	ldd	r25, Z+3	; 0x03
     714:	f7 01       	movw	r30, r14
     716:	93 fd       	sbrc	r25, 3
     718:	85 91       	lpm	r24, Z+
     71a:	93 ff       	sbrs	r25, 3
     71c:	81 91       	ld	r24, Z+
     71e:	7f 01       	movw	r14, r30
     720:	88 23       	and	r24, r24
     722:	09 f4       	brne	.+2      	; 0x726 <vfprintf+0x3a>
     724:	ba c1       	rjmp	.+884    	; 0xa9a <__stack+0x19b>
     726:	85 32       	cpi	r24, 0x25	; 37
     728:	39 f4       	brne	.+14     	; 0x738 <vfprintf+0x4c>
     72a:	93 fd       	sbrc	r25, 3
     72c:	85 91       	lpm	r24, Z+
     72e:	93 ff       	sbrs	r25, 3
     730:	81 91       	ld	r24, Z+
     732:	7f 01       	movw	r14, r30
     734:	85 32       	cpi	r24, 0x25	; 37
     736:	29 f4       	brne	.+10     	; 0x742 <vfprintf+0x56>
     738:	b6 01       	movw	r22, r12
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <fputc>
     740:	e7 cf       	rjmp	.-50     	; 0x710 <vfprintf+0x24>
     742:	91 2c       	mov	r9, r1
     744:	21 2c       	mov	r2, r1
     746:	31 2c       	mov	r3, r1
     748:	ff e1       	ldi	r31, 0x1F	; 31
     74a:	f3 15       	cp	r31, r3
     74c:	d8 f0       	brcs	.+54     	; 0x784 <vfprintf+0x98>
     74e:	8b 32       	cpi	r24, 0x2B	; 43
     750:	79 f0       	breq	.+30     	; 0x770 <vfprintf+0x84>
     752:	38 f4       	brcc	.+14     	; 0x762 <vfprintf+0x76>
     754:	80 32       	cpi	r24, 0x20	; 32
     756:	79 f0       	breq	.+30     	; 0x776 <vfprintf+0x8a>
     758:	83 32       	cpi	r24, 0x23	; 35
     75a:	a1 f4       	brne	.+40     	; 0x784 <vfprintf+0x98>
     75c:	23 2d       	mov	r18, r3
     75e:	20 61       	ori	r18, 0x10	; 16
     760:	1d c0       	rjmp	.+58     	; 0x79c <vfprintf+0xb0>
     762:	8d 32       	cpi	r24, 0x2D	; 45
     764:	61 f0       	breq	.+24     	; 0x77e <vfprintf+0x92>
     766:	80 33       	cpi	r24, 0x30	; 48
     768:	69 f4       	brne	.+26     	; 0x784 <vfprintf+0x98>
     76a:	23 2d       	mov	r18, r3
     76c:	21 60       	ori	r18, 0x01	; 1
     76e:	16 c0       	rjmp	.+44     	; 0x79c <vfprintf+0xb0>
     770:	83 2d       	mov	r24, r3
     772:	82 60       	ori	r24, 0x02	; 2
     774:	38 2e       	mov	r3, r24
     776:	e3 2d       	mov	r30, r3
     778:	e4 60       	ori	r30, 0x04	; 4
     77a:	3e 2e       	mov	r3, r30
     77c:	2a c0       	rjmp	.+84     	; 0x7d2 <vfprintf+0xe6>
     77e:	f3 2d       	mov	r31, r3
     780:	f8 60       	ori	r31, 0x08	; 8
     782:	1d c0       	rjmp	.+58     	; 0x7be <vfprintf+0xd2>
     784:	37 fc       	sbrc	r3, 7
     786:	2d c0       	rjmp	.+90     	; 0x7e2 <vfprintf+0xf6>
     788:	20 ed       	ldi	r18, 0xD0	; 208
     78a:	28 0f       	add	r18, r24
     78c:	2a 30       	cpi	r18, 0x0A	; 10
     78e:	40 f0       	brcs	.+16     	; 0x7a0 <vfprintf+0xb4>
     790:	8e 32       	cpi	r24, 0x2E	; 46
     792:	b9 f4       	brne	.+46     	; 0x7c2 <vfprintf+0xd6>
     794:	36 fc       	sbrc	r3, 6
     796:	81 c1       	rjmp	.+770    	; 0xa9a <__stack+0x19b>
     798:	23 2d       	mov	r18, r3
     79a:	20 64       	ori	r18, 0x40	; 64
     79c:	32 2e       	mov	r3, r18
     79e:	19 c0       	rjmp	.+50     	; 0x7d2 <vfprintf+0xe6>
     7a0:	36 fe       	sbrs	r3, 6
     7a2:	06 c0       	rjmp	.+12     	; 0x7b0 <vfprintf+0xc4>
     7a4:	8a e0       	ldi	r24, 0x0A	; 10
     7a6:	98 9e       	mul	r9, r24
     7a8:	20 0d       	add	r18, r0
     7aa:	11 24       	eor	r1, r1
     7ac:	92 2e       	mov	r9, r18
     7ae:	11 c0       	rjmp	.+34     	; 0x7d2 <vfprintf+0xe6>
     7b0:	ea e0       	ldi	r30, 0x0A	; 10
     7b2:	2e 9e       	mul	r2, r30
     7b4:	20 0d       	add	r18, r0
     7b6:	11 24       	eor	r1, r1
     7b8:	22 2e       	mov	r2, r18
     7ba:	f3 2d       	mov	r31, r3
     7bc:	f0 62       	ori	r31, 0x20	; 32
     7be:	3f 2e       	mov	r3, r31
     7c0:	08 c0       	rjmp	.+16     	; 0x7d2 <vfprintf+0xe6>
     7c2:	8c 36       	cpi	r24, 0x6C	; 108
     7c4:	21 f4       	brne	.+8      	; 0x7ce <vfprintf+0xe2>
     7c6:	83 2d       	mov	r24, r3
     7c8:	80 68       	ori	r24, 0x80	; 128
     7ca:	38 2e       	mov	r3, r24
     7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <vfprintf+0xe6>
     7ce:	88 36       	cpi	r24, 0x68	; 104
     7d0:	41 f4       	brne	.+16     	; 0x7e2 <vfprintf+0xf6>
     7d2:	f7 01       	movw	r30, r14
     7d4:	93 fd       	sbrc	r25, 3
     7d6:	85 91       	lpm	r24, Z+
     7d8:	93 ff       	sbrs	r25, 3
     7da:	81 91       	ld	r24, Z+
     7dc:	7f 01       	movw	r14, r30
     7de:	81 11       	cpse	r24, r1
     7e0:	b3 cf       	rjmp	.-154    	; 0x748 <vfprintf+0x5c>
     7e2:	98 2f       	mov	r25, r24
     7e4:	9f 7d       	andi	r25, 0xDF	; 223
     7e6:	95 54       	subi	r25, 0x45	; 69
     7e8:	93 30       	cpi	r25, 0x03	; 3
     7ea:	28 f4       	brcc	.+10     	; 0x7f6 <vfprintf+0x10a>
     7ec:	0c 5f       	subi	r16, 0xFC	; 252
     7ee:	1f 4f       	sbci	r17, 0xFF	; 255
     7f0:	9f e3       	ldi	r25, 0x3F	; 63
     7f2:	99 83       	std	Y+1, r25	; 0x01
     7f4:	0d c0       	rjmp	.+26     	; 0x810 <vfprintf+0x124>
     7f6:	83 36       	cpi	r24, 0x63	; 99
     7f8:	31 f0       	breq	.+12     	; 0x806 <vfprintf+0x11a>
     7fa:	83 37       	cpi	r24, 0x73	; 115
     7fc:	71 f0       	breq	.+28     	; 0x81a <vfprintf+0x12e>
     7fe:	83 35       	cpi	r24, 0x53	; 83
     800:	09 f0       	breq	.+2      	; 0x804 <vfprintf+0x118>
     802:	59 c0       	rjmp	.+178    	; 0x8b6 <vfprintf+0x1ca>
     804:	21 c0       	rjmp	.+66     	; 0x848 <vfprintf+0x15c>
     806:	f8 01       	movw	r30, r16
     808:	80 81       	ld	r24, Z
     80a:	89 83       	std	Y+1, r24	; 0x01
     80c:	0e 5f       	subi	r16, 0xFE	; 254
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	88 24       	eor	r8, r8
     812:	83 94       	inc	r8
     814:	91 2c       	mov	r9, r1
     816:	53 01       	movw	r10, r6
     818:	13 c0       	rjmp	.+38     	; 0x840 <vfprintf+0x154>
     81a:	28 01       	movw	r4, r16
     81c:	f2 e0       	ldi	r31, 0x02	; 2
     81e:	4f 0e       	add	r4, r31
     820:	51 1c       	adc	r5, r1
     822:	f8 01       	movw	r30, r16
     824:	a0 80       	ld	r10, Z
     826:	b1 80       	ldd	r11, Z+1	; 0x01
     828:	36 fe       	sbrs	r3, 6
     82a:	03 c0       	rjmp	.+6      	; 0x832 <vfprintf+0x146>
     82c:	69 2d       	mov	r22, r9
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	02 c0       	rjmp	.+4      	; 0x836 <vfprintf+0x14a>
     832:	6f ef       	ldi	r22, 0xFF	; 255
     834:	7f ef       	ldi	r23, 0xFF	; 255
     836:	c5 01       	movw	r24, r10
     838:	0e 94 23 08 	call	0x1046	; 0x1046 <strnlen>
     83c:	4c 01       	movw	r8, r24
     83e:	82 01       	movw	r16, r4
     840:	f3 2d       	mov	r31, r3
     842:	ff 77       	andi	r31, 0x7F	; 127
     844:	3f 2e       	mov	r3, r31
     846:	16 c0       	rjmp	.+44     	; 0x874 <vfprintf+0x188>
     848:	28 01       	movw	r4, r16
     84a:	22 e0       	ldi	r18, 0x02	; 2
     84c:	42 0e       	add	r4, r18
     84e:	51 1c       	adc	r5, r1
     850:	f8 01       	movw	r30, r16
     852:	a0 80       	ld	r10, Z
     854:	b1 80       	ldd	r11, Z+1	; 0x01
     856:	36 fe       	sbrs	r3, 6
     858:	03 c0       	rjmp	.+6      	; 0x860 <vfprintf+0x174>
     85a:	69 2d       	mov	r22, r9
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	02 c0       	rjmp	.+4      	; 0x864 <vfprintf+0x178>
     860:	6f ef       	ldi	r22, 0xFF	; 255
     862:	7f ef       	ldi	r23, 0xFF	; 255
     864:	c5 01       	movw	r24, r10
     866:	0e 94 18 08 	call	0x1030	; 0x1030 <strnlen_P>
     86a:	4c 01       	movw	r8, r24
     86c:	f3 2d       	mov	r31, r3
     86e:	f0 68       	ori	r31, 0x80	; 128
     870:	3f 2e       	mov	r3, r31
     872:	82 01       	movw	r16, r4
     874:	33 fc       	sbrc	r3, 3
     876:	1b c0       	rjmp	.+54     	; 0x8ae <vfprintf+0x1c2>
     878:	82 2d       	mov	r24, r2
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	88 16       	cp	r8, r24
     87e:	99 06       	cpc	r9, r25
     880:	b0 f4       	brcc	.+44     	; 0x8ae <vfprintf+0x1c2>
     882:	b6 01       	movw	r22, r12
     884:	80 e2       	ldi	r24, 0x20	; 32
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <fputc>
     88c:	2a 94       	dec	r2
     88e:	f4 cf       	rjmp	.-24     	; 0x878 <vfprintf+0x18c>
     890:	f5 01       	movw	r30, r10
     892:	37 fc       	sbrc	r3, 7
     894:	85 91       	lpm	r24, Z+
     896:	37 fe       	sbrs	r3, 7
     898:	81 91       	ld	r24, Z+
     89a:	5f 01       	movw	r10, r30
     89c:	b6 01       	movw	r22, r12
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <fputc>
     8a4:	21 10       	cpse	r2, r1
     8a6:	2a 94       	dec	r2
     8a8:	21 e0       	ldi	r18, 0x01	; 1
     8aa:	82 1a       	sub	r8, r18
     8ac:	91 08       	sbc	r9, r1
     8ae:	81 14       	cp	r8, r1
     8b0:	91 04       	cpc	r9, r1
     8b2:	71 f7       	brne	.-36     	; 0x890 <vfprintf+0x1a4>
     8b4:	e8 c0       	rjmp	.+464    	; 0xa86 <__stack+0x187>
     8b6:	84 36       	cpi	r24, 0x64	; 100
     8b8:	11 f0       	breq	.+4      	; 0x8be <vfprintf+0x1d2>
     8ba:	89 36       	cpi	r24, 0x69	; 105
     8bc:	41 f5       	brne	.+80     	; 0x90e <__stack+0xf>
     8be:	f8 01       	movw	r30, r16
     8c0:	37 fe       	sbrs	r3, 7
     8c2:	07 c0       	rjmp	.+14     	; 0x8d2 <vfprintf+0x1e6>
     8c4:	60 81       	ld	r22, Z
     8c6:	71 81       	ldd	r23, Z+1	; 0x01
     8c8:	82 81       	ldd	r24, Z+2	; 0x02
     8ca:	93 81       	ldd	r25, Z+3	; 0x03
     8cc:	0c 5f       	subi	r16, 0xFC	; 252
     8ce:	1f 4f       	sbci	r17, 0xFF	; 255
     8d0:	08 c0       	rjmp	.+16     	; 0x8e2 <vfprintf+0x1f6>
     8d2:	60 81       	ld	r22, Z
     8d4:	71 81       	ldd	r23, Z+1	; 0x01
     8d6:	07 2e       	mov	r0, r23
     8d8:	00 0c       	add	r0, r0
     8da:	88 0b       	sbc	r24, r24
     8dc:	99 0b       	sbc	r25, r25
     8de:	0e 5f       	subi	r16, 0xFE	; 254
     8e0:	1f 4f       	sbci	r17, 0xFF	; 255
     8e2:	f3 2d       	mov	r31, r3
     8e4:	ff 76       	andi	r31, 0x6F	; 111
     8e6:	3f 2e       	mov	r3, r31
     8e8:	97 ff       	sbrs	r25, 7
     8ea:	09 c0       	rjmp	.+18     	; 0x8fe <vfprintf+0x212>
     8ec:	90 95       	com	r25
     8ee:	80 95       	com	r24
     8f0:	70 95       	com	r23
     8f2:	61 95       	neg	r22
     8f4:	7f 4f       	sbci	r23, 0xFF	; 255
     8f6:	8f 4f       	sbci	r24, 0xFF	; 255
     8f8:	9f 4f       	sbci	r25, 0xFF	; 255
     8fa:	f0 68       	ori	r31, 0x80	; 128
     8fc:	3f 2e       	mov	r3, r31
     8fe:	2a e0       	ldi	r18, 0x0A	; 10
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	a3 01       	movw	r20, r6
     904:	0e 94 c1 08 	call	0x1182	; 0x1182 <__ultoa_invert>
     908:	88 2e       	mov	r8, r24
     90a:	86 18       	sub	r8, r6
     90c:	45 c0       	rjmp	.+138    	; 0x998 <__stack+0x99>
     90e:	85 37       	cpi	r24, 0x75	; 117
     910:	31 f4       	brne	.+12     	; 0x91e <__stack+0x1f>
     912:	23 2d       	mov	r18, r3
     914:	2f 7e       	andi	r18, 0xEF	; 239
     916:	b2 2e       	mov	r11, r18
     918:	2a e0       	ldi	r18, 0x0A	; 10
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	25 c0       	rjmp	.+74     	; 0x968 <__stack+0x69>
     91e:	93 2d       	mov	r25, r3
     920:	99 7f       	andi	r25, 0xF9	; 249
     922:	b9 2e       	mov	r11, r25
     924:	8f 36       	cpi	r24, 0x6F	; 111
     926:	c1 f0       	breq	.+48     	; 0x958 <__stack+0x59>
     928:	18 f4       	brcc	.+6      	; 0x930 <__stack+0x31>
     92a:	88 35       	cpi	r24, 0x58	; 88
     92c:	79 f0       	breq	.+30     	; 0x94c <__stack+0x4d>
     92e:	b5 c0       	rjmp	.+362    	; 0xa9a <__stack+0x19b>
     930:	80 37       	cpi	r24, 0x70	; 112
     932:	19 f0       	breq	.+6      	; 0x93a <__stack+0x3b>
     934:	88 37       	cpi	r24, 0x78	; 120
     936:	21 f0       	breq	.+8      	; 0x940 <__stack+0x41>
     938:	b0 c0       	rjmp	.+352    	; 0xa9a <__stack+0x19b>
     93a:	e9 2f       	mov	r30, r25
     93c:	e0 61       	ori	r30, 0x10	; 16
     93e:	be 2e       	mov	r11, r30
     940:	b4 fe       	sbrs	r11, 4
     942:	0d c0       	rjmp	.+26     	; 0x95e <__stack+0x5f>
     944:	fb 2d       	mov	r31, r11
     946:	f4 60       	ori	r31, 0x04	; 4
     948:	bf 2e       	mov	r11, r31
     94a:	09 c0       	rjmp	.+18     	; 0x95e <__stack+0x5f>
     94c:	34 fe       	sbrs	r3, 4
     94e:	0a c0       	rjmp	.+20     	; 0x964 <__stack+0x65>
     950:	29 2f       	mov	r18, r25
     952:	26 60       	ori	r18, 0x06	; 6
     954:	b2 2e       	mov	r11, r18
     956:	06 c0       	rjmp	.+12     	; 0x964 <__stack+0x65>
     958:	28 e0       	ldi	r18, 0x08	; 8
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	05 c0       	rjmp	.+10     	; 0x968 <__stack+0x69>
     95e:	20 e1       	ldi	r18, 0x10	; 16
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	02 c0       	rjmp	.+4      	; 0x968 <__stack+0x69>
     964:	20 e1       	ldi	r18, 0x10	; 16
     966:	32 e0       	ldi	r19, 0x02	; 2
     968:	f8 01       	movw	r30, r16
     96a:	b7 fe       	sbrs	r11, 7
     96c:	07 c0       	rjmp	.+14     	; 0x97c <__stack+0x7d>
     96e:	60 81       	ld	r22, Z
     970:	71 81       	ldd	r23, Z+1	; 0x01
     972:	82 81       	ldd	r24, Z+2	; 0x02
     974:	93 81       	ldd	r25, Z+3	; 0x03
     976:	0c 5f       	subi	r16, 0xFC	; 252
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	06 c0       	rjmp	.+12     	; 0x988 <__stack+0x89>
     97c:	60 81       	ld	r22, Z
     97e:	71 81       	ldd	r23, Z+1	; 0x01
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	0e 5f       	subi	r16, 0xFE	; 254
     986:	1f 4f       	sbci	r17, 0xFF	; 255
     988:	a3 01       	movw	r20, r6
     98a:	0e 94 c1 08 	call	0x1182	; 0x1182 <__ultoa_invert>
     98e:	88 2e       	mov	r8, r24
     990:	86 18       	sub	r8, r6
     992:	fb 2d       	mov	r31, r11
     994:	ff 77       	andi	r31, 0x7F	; 127
     996:	3f 2e       	mov	r3, r31
     998:	36 fe       	sbrs	r3, 6
     99a:	0d c0       	rjmp	.+26     	; 0x9b6 <__stack+0xb7>
     99c:	23 2d       	mov	r18, r3
     99e:	2e 7f       	andi	r18, 0xFE	; 254
     9a0:	a2 2e       	mov	r10, r18
     9a2:	89 14       	cp	r8, r9
     9a4:	58 f4       	brcc	.+22     	; 0x9bc <__stack+0xbd>
     9a6:	34 fe       	sbrs	r3, 4
     9a8:	0b c0       	rjmp	.+22     	; 0x9c0 <__stack+0xc1>
     9aa:	32 fc       	sbrc	r3, 2
     9ac:	09 c0       	rjmp	.+18     	; 0x9c0 <__stack+0xc1>
     9ae:	83 2d       	mov	r24, r3
     9b0:	8e 7e       	andi	r24, 0xEE	; 238
     9b2:	a8 2e       	mov	r10, r24
     9b4:	05 c0       	rjmp	.+10     	; 0x9c0 <__stack+0xc1>
     9b6:	b8 2c       	mov	r11, r8
     9b8:	a3 2c       	mov	r10, r3
     9ba:	03 c0       	rjmp	.+6      	; 0x9c2 <__stack+0xc3>
     9bc:	b8 2c       	mov	r11, r8
     9be:	01 c0       	rjmp	.+2      	; 0x9c2 <__stack+0xc3>
     9c0:	b9 2c       	mov	r11, r9
     9c2:	a4 fe       	sbrs	r10, 4
     9c4:	0f c0       	rjmp	.+30     	; 0x9e4 <__stack+0xe5>
     9c6:	fe 01       	movw	r30, r28
     9c8:	e8 0d       	add	r30, r8
     9ca:	f1 1d       	adc	r31, r1
     9cc:	80 81       	ld	r24, Z
     9ce:	80 33       	cpi	r24, 0x30	; 48
     9d0:	21 f4       	brne	.+8      	; 0x9da <__stack+0xdb>
     9d2:	9a 2d       	mov	r25, r10
     9d4:	99 7e       	andi	r25, 0xE9	; 233
     9d6:	a9 2e       	mov	r10, r25
     9d8:	09 c0       	rjmp	.+18     	; 0x9ec <__stack+0xed>
     9da:	a2 fe       	sbrs	r10, 2
     9dc:	06 c0       	rjmp	.+12     	; 0x9ea <__stack+0xeb>
     9de:	b3 94       	inc	r11
     9e0:	b3 94       	inc	r11
     9e2:	04 c0       	rjmp	.+8      	; 0x9ec <__stack+0xed>
     9e4:	8a 2d       	mov	r24, r10
     9e6:	86 78       	andi	r24, 0x86	; 134
     9e8:	09 f0       	breq	.+2      	; 0x9ec <__stack+0xed>
     9ea:	b3 94       	inc	r11
     9ec:	a3 fc       	sbrc	r10, 3
     9ee:	11 c0       	rjmp	.+34     	; 0xa12 <__stack+0x113>
     9f0:	a0 fe       	sbrs	r10, 0
     9f2:	06 c0       	rjmp	.+12     	; 0xa00 <__stack+0x101>
     9f4:	b2 14       	cp	r11, r2
     9f6:	88 f4       	brcc	.+34     	; 0xa1a <__stack+0x11b>
     9f8:	28 0c       	add	r2, r8
     9fa:	92 2c       	mov	r9, r2
     9fc:	9b 18       	sub	r9, r11
     9fe:	0e c0       	rjmp	.+28     	; 0xa1c <__stack+0x11d>
     a00:	b2 14       	cp	r11, r2
     a02:	60 f4       	brcc	.+24     	; 0xa1c <__stack+0x11d>
     a04:	b6 01       	movw	r22, r12
     a06:	80 e2       	ldi	r24, 0x20	; 32
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <fputc>
     a0e:	b3 94       	inc	r11
     a10:	f7 cf       	rjmp	.-18     	; 0xa00 <__stack+0x101>
     a12:	b2 14       	cp	r11, r2
     a14:	18 f4       	brcc	.+6      	; 0xa1c <__stack+0x11d>
     a16:	2b 18       	sub	r2, r11
     a18:	02 c0       	rjmp	.+4      	; 0xa1e <__stack+0x11f>
     a1a:	98 2c       	mov	r9, r8
     a1c:	21 2c       	mov	r2, r1
     a1e:	a4 fe       	sbrs	r10, 4
     a20:	10 c0       	rjmp	.+32     	; 0xa42 <__stack+0x143>
     a22:	b6 01       	movw	r22, r12
     a24:	80 e3       	ldi	r24, 0x30	; 48
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <fputc>
     a2c:	a2 fe       	sbrs	r10, 2
     a2e:	17 c0       	rjmp	.+46     	; 0xa5e <__stack+0x15f>
     a30:	a1 fc       	sbrc	r10, 1
     a32:	03 c0       	rjmp	.+6      	; 0xa3a <__stack+0x13b>
     a34:	88 e7       	ldi	r24, 0x78	; 120
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <__stack+0x13f>
     a3a:	88 e5       	ldi	r24, 0x58	; 88
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	b6 01       	movw	r22, r12
     a40:	0c c0       	rjmp	.+24     	; 0xa5a <__stack+0x15b>
     a42:	8a 2d       	mov	r24, r10
     a44:	86 78       	andi	r24, 0x86	; 134
     a46:	59 f0       	breq	.+22     	; 0xa5e <__stack+0x15f>
     a48:	a1 fe       	sbrs	r10, 1
     a4a:	02 c0       	rjmp	.+4      	; 0xa50 <__stack+0x151>
     a4c:	8b e2       	ldi	r24, 0x2B	; 43
     a4e:	01 c0       	rjmp	.+2      	; 0xa52 <__stack+0x153>
     a50:	80 e2       	ldi	r24, 0x20	; 32
     a52:	a7 fc       	sbrc	r10, 7
     a54:	8d e2       	ldi	r24, 0x2D	; 45
     a56:	b6 01       	movw	r22, r12
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <fputc>
     a5e:	89 14       	cp	r8, r9
     a60:	38 f4       	brcc	.+14     	; 0xa70 <__stack+0x171>
     a62:	b6 01       	movw	r22, r12
     a64:	80 e3       	ldi	r24, 0x30	; 48
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <fputc>
     a6c:	9a 94       	dec	r9
     a6e:	f7 cf       	rjmp	.-18     	; 0xa5e <__stack+0x15f>
     a70:	8a 94       	dec	r8
     a72:	f3 01       	movw	r30, r6
     a74:	e8 0d       	add	r30, r8
     a76:	f1 1d       	adc	r31, r1
     a78:	80 81       	ld	r24, Z
     a7a:	b6 01       	movw	r22, r12
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <fputc>
     a82:	81 10       	cpse	r8, r1
     a84:	f5 cf       	rjmp	.-22     	; 0xa70 <__stack+0x171>
     a86:	22 20       	and	r2, r2
     a88:	09 f4       	brne	.+2      	; 0xa8c <__stack+0x18d>
     a8a:	42 ce       	rjmp	.-892    	; 0x710 <vfprintf+0x24>
     a8c:	b6 01       	movw	r22, r12
     a8e:	80 e2       	ldi	r24, 0x20	; 32
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <fputc>
     a96:	2a 94       	dec	r2
     a98:	f6 cf       	rjmp	.-20     	; 0xa86 <__stack+0x187>
     a9a:	f6 01       	movw	r30, r12
     a9c:	86 81       	ldd	r24, Z+6	; 0x06
     a9e:	97 81       	ldd	r25, Z+7	; 0x07
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <__stack+0x1a7>
     aa2:	8f ef       	ldi	r24, 0xFF	; 255
     aa4:	9f ef       	ldi	r25, 0xFF	; 255
     aa6:	2b 96       	adiw	r28, 0x0b	; 11
     aa8:	e2 e1       	ldi	r30, 0x12	; 18
     aaa:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__epilogue_restores__>

00000aae <putval>:
     aae:	20 fd       	sbrc	r18, 0
     ab0:	09 c0       	rjmp	.+18     	; 0xac4 <putval+0x16>
     ab2:	fc 01       	movw	r30, r24
     ab4:	23 fd       	sbrc	r18, 3
     ab6:	05 c0       	rjmp	.+10     	; 0xac2 <putval+0x14>
     ab8:	22 ff       	sbrs	r18, 2
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <putval+0x12>
     abc:	73 83       	std	Z+3, r23	; 0x03
     abe:	62 83       	std	Z+2, r22	; 0x02
     ac0:	51 83       	std	Z+1, r21	; 0x01
     ac2:	40 83       	st	Z, r20
     ac4:	08 95       	ret

00000ac6 <mulacc>:
     ac6:	44 fd       	sbrc	r20, 4
     ac8:	17 c0       	rjmp	.+46     	; 0xaf8 <mulacc+0x32>
     aca:	46 fd       	sbrc	r20, 6
     acc:	17 c0       	rjmp	.+46     	; 0xafc <mulacc+0x36>
     ace:	ab 01       	movw	r20, r22
     ad0:	bc 01       	movw	r22, r24
     ad2:	da 01       	movw	r26, r20
     ad4:	fb 01       	movw	r30, r22
     ad6:	aa 0f       	add	r26, r26
     ad8:	bb 1f       	adc	r27, r27
     ada:	ee 1f       	adc	r30, r30
     adc:	ff 1f       	adc	r31, r31
     ade:	10 94       	com	r1
     ae0:	d1 f7       	brne	.-12     	; 0xad6 <mulacc+0x10>
     ae2:	4a 0f       	add	r20, r26
     ae4:	5b 1f       	adc	r21, r27
     ae6:	6e 1f       	adc	r22, r30
     ae8:	7f 1f       	adc	r23, r31
     aea:	cb 01       	movw	r24, r22
     aec:	ba 01       	movw	r22, r20
     aee:	66 0f       	add	r22, r22
     af0:	77 1f       	adc	r23, r23
     af2:	88 1f       	adc	r24, r24
     af4:	99 1f       	adc	r25, r25
     af6:	09 c0       	rjmp	.+18     	; 0xb0a <mulacc+0x44>
     af8:	33 e0       	ldi	r19, 0x03	; 3
     afa:	01 c0       	rjmp	.+2      	; 0xafe <mulacc+0x38>
     afc:	34 e0       	ldi	r19, 0x04	; 4
     afe:	66 0f       	add	r22, r22
     b00:	77 1f       	adc	r23, r23
     b02:	88 1f       	adc	r24, r24
     b04:	99 1f       	adc	r25, r25
     b06:	31 50       	subi	r19, 0x01	; 1
     b08:	d1 f7       	brne	.-12     	; 0xafe <mulacc+0x38>
     b0a:	62 0f       	add	r22, r18
     b0c:	71 1d       	adc	r23, r1
     b0e:	81 1d       	adc	r24, r1
     b10:	91 1d       	adc	r25, r1
     b12:	08 95       	ret

00000b14 <skip_spaces>:
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	8c 01       	movw	r16, r24
     b1e:	c8 01       	movw	r24, r16
     b20:	0e 94 2e 08 	call	0x105c	; 0x105c <fgetc>
     b24:	ec 01       	movw	r28, r24
     b26:	97 fd       	sbrc	r25, 7
     b28:	08 c0       	rjmp	.+16     	; 0xb3a <skip_spaces+0x26>
     b2a:	0e 94 04 08 	call	0x1008	; 0x1008 <isspace>
     b2e:	89 2b       	or	r24, r25
     b30:	b1 f7       	brne	.-20     	; 0xb1e <skip_spaces+0xa>
     b32:	b8 01       	movw	r22, r16
     b34:	ce 01       	movw	r24, r28
     b36:	0e 94 a8 08 	call	0x1150	; 0x1150 <ungetc>
     b3a:	ce 01       	movw	r24, r28
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	08 95       	ret

00000b46 <conv_int>:
     b46:	8f 92       	push	r8
     b48:	9f 92       	push	r9
     b4a:	af 92       	push	r10
     b4c:	bf 92       	push	r11
     b4e:	ef 92       	push	r14
     b50:	ff 92       	push	r15
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	8c 01       	movw	r16, r24
     b5c:	d6 2f       	mov	r29, r22
     b5e:	7a 01       	movw	r14, r20
     b60:	b2 2e       	mov	r11, r18
     b62:	0e 94 2e 08 	call	0x105c	; 0x105c <fgetc>
     b66:	9c 01       	movw	r18, r24
     b68:	33 27       	eor	r19, r19
     b6a:	2b 32       	cpi	r18, 0x2B	; 43
     b6c:	31 05       	cpc	r19, r1
     b6e:	31 f0       	breq	.+12     	; 0xb7c <conv_int+0x36>
     b70:	2d 32       	cpi	r18, 0x2D	; 45
     b72:	31 05       	cpc	r19, r1
     b74:	61 f4       	brne	.+24     	; 0xb8e <conv_int+0x48>
     b76:	8b 2d       	mov	r24, r11
     b78:	80 68       	ori	r24, 0x80	; 128
     b7a:	b8 2e       	mov	r11, r24
     b7c:	d1 50       	subi	r29, 0x01	; 1
     b7e:	11 f4       	brne	.+4      	; 0xb84 <conv_int+0x3e>
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	68 c0       	rjmp	.+208    	; 0xc54 <conv_int+0x10e>
     b84:	c8 01       	movw	r24, r16
     b86:	0e 94 2e 08 	call	0x105c	; 0x105c <fgetc>
     b8a:	97 fd       	sbrc	r25, 7
     b8c:	f9 cf       	rjmp	.-14     	; 0xb80 <conv_int+0x3a>
     b8e:	cb 2d       	mov	r28, r11
     b90:	cd 7f       	andi	r28, 0xFD	; 253
     b92:	2b 2d       	mov	r18, r11
     b94:	20 73       	andi	r18, 0x30	; 48
     b96:	09 f5       	brne	.+66     	; 0xbda <conv_int+0x94>
     b98:	80 33       	cpi	r24, 0x30	; 48
     b9a:	f9 f4       	brne	.+62     	; 0xbda <conv_int+0x94>
     b9c:	aa 24       	eor	r10, r10
     b9e:	aa 94       	dec	r10
     ba0:	ad 0e       	add	r10, r29
     ba2:	09 f4       	brne	.+2      	; 0xba6 <conv_int+0x60>
     ba4:	43 c0       	rjmp	.+134    	; 0xc2c <conv_int+0xe6>
     ba6:	c8 01       	movw	r24, r16
     ba8:	0e 94 2e 08 	call	0x105c	; 0x105c <fgetc>
     bac:	97 fd       	sbrc	r25, 7
     bae:	3e c0       	rjmp	.+124    	; 0xc2c <conv_int+0xe6>
     bb0:	9c 01       	movw	r18, r24
     bb2:	2f 7d       	andi	r18, 0xDF	; 223
     bb4:	33 27       	eor	r19, r19
     bb6:	28 35       	cpi	r18, 0x58	; 88
     bb8:	31 05       	cpc	r19, r1
     bba:	49 f4       	brne	.+18     	; 0xbce <conv_int+0x88>
     bbc:	c2 64       	ori	r28, 0x42	; 66
     bbe:	d2 50       	subi	r29, 0x02	; 2
     bc0:	a9 f1       	breq	.+106    	; 0xc2c <conv_int+0xe6>
     bc2:	c8 01       	movw	r24, r16
     bc4:	0e 94 2e 08 	call	0x105c	; 0x105c <fgetc>
     bc8:	97 ff       	sbrs	r25, 7
     bca:	07 c0       	rjmp	.+14     	; 0xbda <conv_int+0x94>
     bcc:	2f c0       	rjmp	.+94     	; 0xc2c <conv_int+0xe6>
     bce:	b6 fe       	sbrs	r11, 6
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <conv_int+0x90>
     bd2:	c2 60       	ori	r28, 0x02	; 2
     bd4:	01 c0       	rjmp	.+2      	; 0xbd8 <conv_int+0x92>
     bd6:	c2 61       	ori	r28, 0x12	; 18
     bd8:	da 2d       	mov	r29, r10
     bda:	81 2c       	mov	r8, r1
     bdc:	91 2c       	mov	r9, r1
     bde:	54 01       	movw	r10, r8
     be0:	20 ed       	ldi	r18, 0xD0	; 208
     be2:	28 0f       	add	r18, r24
     be4:	28 30       	cpi	r18, 0x08	; 8
     be6:	80 f0       	brcs	.+32     	; 0xc08 <conv_int+0xc2>
     be8:	c4 ff       	sbrs	r28, 4
     bea:	04 c0       	rjmp	.+8      	; 0xbf4 <conv_int+0xae>
     bec:	b8 01       	movw	r22, r16
     bee:	0e 94 a8 08 	call	0x1150	; 0x1150 <ungetc>
     bf2:	19 c0       	rjmp	.+50     	; 0xc26 <conv_int+0xe0>
     bf4:	2a 30       	cpi	r18, 0x0A	; 10
     bf6:	40 f0       	brcs	.+16     	; 0xc08 <conv_int+0xc2>
     bf8:	c6 ff       	sbrs	r28, 6
     bfa:	f8 cf       	rjmp	.-16     	; 0xbec <conv_int+0xa6>
     bfc:	2f 7d       	andi	r18, 0xDF	; 223
     bfe:	3f ee       	ldi	r19, 0xEF	; 239
     c00:	32 0f       	add	r19, r18
     c02:	36 30       	cpi	r19, 0x06	; 6
     c04:	98 f7       	brcc	.-26     	; 0xbec <conv_int+0xa6>
     c06:	27 50       	subi	r18, 0x07	; 7
     c08:	4c 2f       	mov	r20, r28
     c0a:	c5 01       	movw	r24, r10
     c0c:	b4 01       	movw	r22, r8
     c0e:	0e 94 63 05 	call	0xac6	; 0xac6 <mulacc>
     c12:	4b 01       	movw	r8, r22
     c14:	5c 01       	movw	r10, r24
     c16:	c2 60       	ori	r28, 0x02	; 2
     c18:	d1 50       	subi	r29, 0x01	; 1
     c1a:	59 f0       	breq	.+22     	; 0xc32 <conv_int+0xec>
     c1c:	c8 01       	movw	r24, r16
     c1e:	0e 94 2e 08 	call	0x105c	; 0x105c <fgetc>
     c22:	97 ff       	sbrs	r25, 7
     c24:	dd cf       	rjmp	.-70     	; 0xbe0 <conv_int+0x9a>
     c26:	c1 fd       	sbrc	r28, 1
     c28:	04 c0       	rjmp	.+8      	; 0xc32 <conv_int+0xec>
     c2a:	aa cf       	rjmp	.-172    	; 0xb80 <conv_int+0x3a>
     c2c:	81 2c       	mov	r8, r1
     c2e:	91 2c       	mov	r9, r1
     c30:	54 01       	movw	r10, r8
     c32:	c7 ff       	sbrs	r28, 7
     c34:	08 c0       	rjmp	.+16     	; 0xc46 <conv_int+0x100>
     c36:	b0 94       	com	r11
     c38:	a0 94       	com	r10
     c3a:	90 94       	com	r9
     c3c:	80 94       	com	r8
     c3e:	81 1c       	adc	r8, r1
     c40:	91 1c       	adc	r9, r1
     c42:	a1 1c       	adc	r10, r1
     c44:	b1 1c       	adc	r11, r1
     c46:	2c 2f       	mov	r18, r28
     c48:	b5 01       	movw	r22, r10
     c4a:	a4 01       	movw	r20, r8
     c4c:	c7 01       	movw	r24, r14
     c4e:	0e 94 57 05 	call	0xaae	; 0xaae <putval>
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	1f 91       	pop	r17
     c5a:	0f 91       	pop	r16
     c5c:	ff 90       	pop	r15
     c5e:	ef 90       	pop	r14
     c60:	bf 90       	pop	r11
     c62:	af 90       	pop	r10
     c64:	9f 90       	pop	r9
     c66:	8f 90       	pop	r8
     c68:	08 95       	ret

00000c6a <conv_brk>:
     c6a:	a0 e2       	ldi	r26, 0x20	; 32
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	eb e3       	ldi	r30, 0x3B	; 59
     c70:	f6 e0       	ldi	r31, 0x06	; 6
     c72:	0c 94 25 09 	jmp	0x124a	; 0x124a <__prologue_saves__+0x6>
     c76:	5c 01       	movw	r10, r24
     c78:	96 2e       	mov	r9, r22
     c7a:	7a 01       	movw	r14, r20
     c7c:	f9 01       	movw	r30, r18
     c7e:	8e 01       	movw	r16, r28
     c80:	0f 5f       	subi	r16, 0xFF	; 255
     c82:	1f 4f       	sbci	r17, 0xFF	; 255
     c84:	68 01       	movw	r12, r16
     c86:	80 e2       	ldi	r24, 0x20	; 32
     c88:	d8 01       	movw	r26, r16
     c8a:	1d 92       	st	X+, r1
     c8c:	8a 95       	dec	r24
     c8e:	e9 f7       	brne	.-6      	; 0xc8a <conv_brk+0x20>
     c90:	d5 01       	movw	r26, r10
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	8c 90       	ld	r8, X
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	61 2c       	mov	r6, r1
     c9c:	71 2c       	mov	r7, r1
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	61 e0       	ldi	r22, 0x01	; 1
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	83 fc       	sbrc	r8, 3
     ca6:	25 91       	lpm	r18, Z+
     ca8:	83 fe       	sbrs	r8, 3
     caa:	21 91       	ld	r18, Z+
     cac:	8f 01       	movw	r16, r30
     cae:	52 2e       	mov	r5, r18
     cb0:	21 11       	cpse	r18, r1
     cb2:	03 c0       	rjmp	.+6      	; 0xcba <conv_brk+0x50>
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	92 c0       	rjmp	.+292    	; 0xdde <conv_brk+0x174>
     cba:	2e 35       	cpi	r18, 0x5E	; 94
     cbc:	11 f4       	brne	.+4      	; 0xcc2 <conv_brk+0x58>
     cbe:	00 97       	sbiw	r24, 0x00	; 0
     cc0:	51 f1       	breq	.+84     	; 0xd16 <conv_brk+0xac>
     cc2:	43 2f       	mov	r20, r19
     cc4:	50 e0       	ldi	r21, 0x00	; 0
     cc6:	48 17       	cp	r20, r24
     cc8:	59 07       	cpc	r21, r25
     cca:	3c f4       	brge	.+14     	; 0xcda <conv_brk+0x70>
     ccc:	2d 35       	cpi	r18, 0x5D	; 93
     cce:	59 f1       	breq	.+86     	; 0xd26 <conv_brk+0xbc>
     cd0:	2d 32       	cpi	r18, 0x2D	; 45
     cd2:	19 f4       	brne	.+6      	; 0xcda <conv_brk+0x70>
     cd4:	77 20       	and	r7, r7
     cd6:	09 f1       	breq	.+66     	; 0xd1a <conv_brk+0xb0>
     cd8:	03 c0       	rjmp	.+6      	; 0xce0 <conv_brk+0x76>
     cda:	77 20       	and	r7, r7
     cdc:	09 f4       	brne	.+2      	; 0xce0 <conv_brk+0x76>
     cde:	6a c0       	rjmp	.+212    	; 0xdb4 <conv_brk+0x14a>
     ce0:	45 2d       	mov	r20, r5
     ce2:	46 95       	lsr	r20
     ce4:	46 95       	lsr	r20
     ce6:	46 95       	lsr	r20
     ce8:	d6 01       	movw	r26, r12
     cea:	a4 0f       	add	r26, r20
     cec:	b1 1d       	adc	r27, r1
     cee:	45 2d       	mov	r20, r5
     cf0:	47 70       	andi	r20, 0x07	; 7
     cf2:	8b 01       	movw	r16, r22
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <conv_brk+0x90>
     cf6:	00 0f       	add	r16, r16
     cf8:	11 1f       	adc	r17, r17
     cfa:	4a 95       	dec	r20
     cfc:	e2 f7       	brpl	.-8      	; 0xcf6 <conv_brk+0x8c>
     cfe:	a8 01       	movw	r20, r16
     d00:	5c 91       	ld	r21, X
     d02:	45 2b       	or	r20, r21
     d04:	4c 93       	st	X, r20
     d06:	65 14       	cp	r6, r5
     d08:	59 f0       	breq	.+22     	; 0xd20 <conv_brk+0xb6>
     d0a:	56 14       	cp	r5, r6
     d0c:	10 f4       	brcc	.+4      	; 0xd12 <conv_brk+0xa8>
     d0e:	53 94       	inc	r5
     d10:	e7 cf       	rjmp	.-50     	; 0xce0 <conv_brk+0x76>
     d12:	5a 94       	dec	r5
     d14:	e5 cf       	rjmp	.-54     	; 0xce0 <conv_brk+0x76>
     d16:	31 e0       	ldi	r19, 0x01	; 1
     d18:	04 c0       	rjmp	.+8      	; 0xd22 <conv_brk+0xb8>
     d1a:	77 24       	eor	r7, r7
     d1c:	73 94       	inc	r7
     d1e:	01 c0       	rjmp	.+2      	; 0xd22 <conv_brk+0xb8>
     d20:	71 2c       	mov	r7, r1
     d22:	01 96       	adiw	r24, 0x01	; 1
     d24:	bf cf       	rjmp	.-130    	; 0xca4 <conv_brk+0x3a>
     d26:	77 20       	and	r7, r7
     d28:	19 f0       	breq	.+6      	; 0xd30 <conv_brk+0xc6>
     d2a:	8e 81       	ldd	r24, Y+6	; 0x06
     d2c:	80 62       	ori	r24, 0x20	; 32
     d2e:	8e 83       	std	Y+6, r24	; 0x06
     d30:	31 11       	cpse	r19, r1
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <conv_brk+0xd0>
     d34:	88 24       	eor	r8, r8
     d36:	83 94       	inc	r8
     d38:	17 c0       	rjmp	.+46     	; 0xd68 <conv_brk+0xfe>
     d3a:	f6 01       	movw	r30, r12
     d3c:	9e 01       	movw	r18, r28
     d3e:	2f 5d       	subi	r18, 0xDF	; 223
     d40:	3f 4f       	sbci	r19, 0xFF	; 255
     d42:	80 81       	ld	r24, Z
     d44:	80 95       	com	r24
     d46:	81 93       	st	Z+, r24
     d48:	2e 17       	cp	r18, r30
     d4a:	3f 07       	cpc	r19, r31
     d4c:	d1 f7       	brne	.-12     	; 0xd42 <conv_brk+0xd8>
     d4e:	f2 cf       	rjmp	.-28     	; 0xd34 <conv_brk+0xca>
     d50:	e1 14       	cp	r14, r1
     d52:	f1 04       	cpc	r15, r1
     d54:	29 f0       	breq	.+10     	; 0xd60 <conv_brk+0xf6>
     d56:	d7 01       	movw	r26, r14
     d58:	8c 93       	st	X, r24
     d5a:	f7 01       	movw	r30, r14
     d5c:	31 96       	adiw	r30, 0x01	; 1
     d5e:	7f 01       	movw	r14, r30
     d60:	9a 94       	dec	r9
     d62:	81 2c       	mov	r8, r1
     d64:	99 20       	and	r9, r9
     d66:	f9 f0       	breq	.+62     	; 0xda6 <conv_brk+0x13c>
     d68:	c5 01       	movw	r24, r10
     d6a:	0e 94 2e 08 	call	0x105c	; 0x105c <fgetc>
     d6e:	97 fd       	sbrc	r25, 7
     d70:	18 c0       	rjmp	.+48     	; 0xda2 <conv_brk+0x138>
     d72:	fc 01       	movw	r30, r24
     d74:	ff 27       	eor	r31, r31
     d76:	23 e0       	ldi	r18, 0x03	; 3
     d78:	f5 95       	asr	r31
     d7a:	e7 95       	ror	r30
     d7c:	2a 95       	dec	r18
     d7e:	e1 f7       	brne	.-8      	; 0xd78 <conv_brk+0x10e>
     d80:	ec 0d       	add	r30, r12
     d82:	fd 1d       	adc	r31, r13
     d84:	20 81       	ld	r18, Z
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	ac 01       	movw	r20, r24
     d8a:	47 70       	andi	r20, 0x07	; 7
     d8c:	55 27       	eor	r21, r21
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <conv_brk+0x12a>
     d90:	35 95       	asr	r19
     d92:	27 95       	ror	r18
     d94:	4a 95       	dec	r20
     d96:	e2 f7       	brpl	.-8      	; 0xd90 <conv_brk+0x126>
     d98:	20 fd       	sbrc	r18, 0
     d9a:	da cf       	rjmp	.-76     	; 0xd50 <conv_brk+0xe6>
     d9c:	b5 01       	movw	r22, r10
     d9e:	0e 94 a8 08 	call	0x1150	; 0x1150 <ungetc>
     da2:	81 10       	cpse	r8, r1
     da4:	87 cf       	rjmp	.-242    	; 0xcb4 <conv_brk+0x4a>
     da6:	e1 14       	cp	r14, r1
     da8:	f1 04       	cpc	r15, r1
     daa:	11 f0       	breq	.+4      	; 0xdb0 <conv_brk+0x146>
     dac:	d7 01       	movw	r26, r14
     dae:	1c 92       	st	X, r1
     db0:	c8 01       	movw	r24, r16
     db2:	15 c0       	rjmp	.+42     	; 0xdde <conv_brk+0x174>
     db4:	42 2f       	mov	r20, r18
     db6:	46 95       	lsr	r20
     db8:	46 95       	lsr	r20
     dba:	46 95       	lsr	r20
     dbc:	d6 01       	movw	r26, r12
     dbe:	a4 0f       	add	r26, r20
     dc0:	b1 1d       	adc	r27, r1
     dc2:	42 2f       	mov	r20, r18
     dc4:	47 70       	andi	r20, 0x07	; 7
     dc6:	8b 01       	movw	r16, r22
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <conv_brk+0x164>
     dca:	00 0f       	add	r16, r16
     dcc:	11 1f       	adc	r17, r17
     dce:	4a 95       	dec	r20
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <conv_brk+0x160>
     dd2:	a8 01       	movw	r20, r16
     dd4:	5c 91       	ld	r21, X
     dd6:	45 2b       	or	r20, r21
     dd8:	4c 93       	st	X, r20
     dda:	62 2e       	mov	r6, r18
     ddc:	a2 cf       	rjmp	.-188    	; 0xd22 <conv_brk+0xb8>
     dde:	a0 96       	adiw	r28, 0x20	; 32
     de0:	ef e0       	ldi	r30, 0x0F	; 15
     de2:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__epilogue_restores__+0x6>

00000de6 <vfscanf>:
     de6:	a0 e0       	ldi	r26, 0x00	; 0
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e9 ef       	ldi	r30, 0xF9	; 249
     dec:	f6 e0       	ldi	r31, 0x06	; 6
     dee:	0c 94 25 09 	jmp	0x124a	; 0x124a <__prologue_saves__+0x6>
     df2:	6c 01       	movw	r12, r24
     df4:	eb 01       	movw	r28, r22
     df6:	5a 01       	movw	r10, r20
     df8:	fc 01       	movw	r30, r24
     dfa:	17 82       	std	Z+7, r1	; 0x07
     dfc:	16 82       	std	Z+6, r1	; 0x06
     dfe:	51 2c       	mov	r5, r1
     e00:	f6 01       	movw	r30, r12
     e02:	e3 80       	ldd	r14, Z+3	; 0x03
     e04:	fe 01       	movw	r30, r28
     e06:	e3 fc       	sbrc	r14, 3
     e08:	85 91       	lpm	r24, Z+
     e0a:	e3 fe       	sbrs	r14, 3
     e0c:	81 91       	ld	r24, Z+
     e0e:	18 2f       	mov	r17, r24
     e10:	ef 01       	movw	r28, r30
     e12:	88 23       	and	r24, r24
     e14:	09 f4       	brne	.+2      	; 0xe18 <vfscanf+0x32>
     e16:	ee c0       	rjmp	.+476    	; 0xff4 <vfscanf+0x20e>
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 04 08 	call	0x1008	; 0x1008 <isspace>
     e1e:	89 2b       	or	r24, r25
     e20:	21 f0       	breq	.+8      	; 0xe2a <vfscanf+0x44>
     e22:	c6 01       	movw	r24, r12
     e24:	0e 94 8a 05 	call	0xb14	; 0xb14 <skip_spaces>
     e28:	eb cf       	rjmp	.-42     	; 0xe00 <vfscanf+0x1a>
     e2a:	15 32       	cpi	r17, 0x25	; 37
     e2c:	41 f4       	brne	.+16     	; 0xe3e <vfscanf+0x58>
     e2e:	fe 01       	movw	r30, r28
     e30:	e3 fc       	sbrc	r14, 3
     e32:	15 91       	lpm	r17, Z+
     e34:	e3 fe       	sbrs	r14, 3
     e36:	11 91       	ld	r17, Z+
     e38:	ef 01       	movw	r28, r30
     e3a:	15 32       	cpi	r17, 0x25	; 37
     e3c:	81 f4       	brne	.+32     	; 0xe5e <vfscanf+0x78>
     e3e:	c6 01       	movw	r24, r12
     e40:	0e 94 2e 08 	call	0x105c	; 0x105c <fgetc>
     e44:	97 fd       	sbrc	r25, 7
     e46:	d4 c0       	rjmp	.+424    	; 0xff0 <vfscanf+0x20a>
     e48:	41 2f       	mov	r20, r17
     e4a:	50 e0       	ldi	r21, 0x00	; 0
     e4c:	9c 01       	movw	r18, r24
     e4e:	33 27       	eor	r19, r19
     e50:	24 17       	cp	r18, r20
     e52:	35 07       	cpc	r19, r21
     e54:	a9 f2       	breq	.-86     	; 0xe00 <vfscanf+0x1a>
     e56:	b6 01       	movw	r22, r12
     e58:	0e 94 a8 08 	call	0x1150	; 0x1150 <ungetc>
     e5c:	cb c0       	rjmp	.+406    	; 0xff4 <vfscanf+0x20e>
     e5e:	1a 32       	cpi	r17, 0x2A	; 42
     e60:	39 f4       	brne	.+14     	; 0xe70 <vfscanf+0x8a>
     e62:	e3 fc       	sbrc	r14, 3
     e64:	15 91       	lpm	r17, Z+
     e66:	e3 fe       	sbrs	r14, 3
     e68:	11 91       	ld	r17, Z+
     e6a:	ef 01       	movw	r28, r30
     e6c:	01 e0       	ldi	r16, 0x01	; 1
     e6e:	01 c0       	rjmp	.+2      	; 0xe72 <vfscanf+0x8c>
     e70:	00 e0       	ldi	r16, 0x00	; 0
     e72:	f1 2c       	mov	r15, r1
     e74:	20 ed       	ldi	r18, 0xD0	; 208
     e76:	21 0f       	add	r18, r17
     e78:	2a 30       	cpi	r18, 0x0A	; 10
     e7a:	80 f4       	brcc	.+32     	; 0xe9c <vfscanf+0xb6>
     e7c:	02 60       	ori	r16, 0x02	; 2
     e7e:	6f 2d       	mov	r22, r15
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	40 e2       	ldi	r20, 0x20	; 32
     e88:	0e 94 63 05 	call	0xac6	; 0xac6 <mulacc>
     e8c:	f6 2e       	mov	r15, r22
     e8e:	fe 01       	movw	r30, r28
     e90:	e3 fc       	sbrc	r14, 3
     e92:	15 91       	lpm	r17, Z+
     e94:	e3 fe       	sbrs	r14, 3
     e96:	11 91       	ld	r17, Z+
     e98:	ef 01       	movw	r28, r30
     e9a:	ec cf       	rjmp	.-40     	; 0xe74 <vfscanf+0x8e>
     e9c:	01 ff       	sbrs	r16, 1
     e9e:	03 c0       	rjmp	.+6      	; 0xea6 <vfscanf+0xc0>
     ea0:	f1 10       	cpse	r15, r1
     ea2:	03 c0       	rjmp	.+6      	; 0xeaa <vfscanf+0xc4>
     ea4:	a7 c0       	rjmp	.+334    	; 0xff4 <vfscanf+0x20e>
     ea6:	ff 24       	eor	r15, r15
     ea8:	fa 94       	dec	r15
     eaa:	18 36       	cpi	r17, 0x68	; 104
     eac:	19 f0       	breq	.+6      	; 0xeb4 <vfscanf+0xce>
     eae:	1c 36       	cpi	r17, 0x6C	; 108
     eb0:	51 f0       	breq	.+20     	; 0xec6 <vfscanf+0xe0>
     eb2:	10 c0       	rjmp	.+32     	; 0xed4 <vfscanf+0xee>
     eb4:	fe 01       	movw	r30, r28
     eb6:	e3 fc       	sbrc	r14, 3
     eb8:	15 91       	lpm	r17, Z+
     eba:	e3 fe       	sbrs	r14, 3
     ebc:	11 91       	ld	r17, Z+
     ebe:	ef 01       	movw	r28, r30
     ec0:	18 36       	cpi	r17, 0x68	; 104
     ec2:	41 f4       	brne	.+16     	; 0xed4 <vfscanf+0xee>
     ec4:	08 60       	ori	r16, 0x08	; 8
     ec6:	04 60       	ori	r16, 0x04	; 4
     ec8:	fe 01       	movw	r30, r28
     eca:	e3 fc       	sbrc	r14, 3
     ecc:	15 91       	lpm	r17, Z+
     ece:	e3 fe       	sbrs	r14, 3
     ed0:	11 91       	ld	r17, Z+
     ed2:	ef 01       	movw	r28, r30
     ed4:	11 23       	and	r17, r17
     ed6:	09 f4       	brne	.+2      	; 0xeda <vfscanf+0xf4>
     ed8:	8d c0       	rjmp	.+282    	; 0xff4 <vfscanf+0x20e>
     eda:	61 2f       	mov	r22, r17
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	88 e8       	ldi	r24, 0x88	; 136
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 0d 08 	call	0x101a	; 0x101a <strchr_P>
     ee6:	89 2b       	or	r24, r25
     ee8:	09 f4       	brne	.+2      	; 0xeec <vfscanf+0x106>
     eea:	84 c0       	rjmp	.+264    	; 0xff4 <vfscanf+0x20e>
     eec:	00 fd       	sbrc	r16, 0
     eee:	07 c0       	rjmp	.+14     	; 0xefe <vfscanf+0x118>
     ef0:	f5 01       	movw	r30, r10
     ef2:	80 80       	ld	r8, Z
     ef4:	91 80       	ldd	r9, Z+1	; 0x01
     ef6:	c5 01       	movw	r24, r10
     ef8:	02 96       	adiw	r24, 0x02	; 2
     efa:	5c 01       	movw	r10, r24
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <vfscanf+0x11c>
     efe:	81 2c       	mov	r8, r1
     f00:	91 2c       	mov	r9, r1
     f02:	1e 36       	cpi	r17, 0x6E	; 110
     f04:	51 f4       	brne	.+20     	; 0xf1a <vfscanf+0x134>
     f06:	f6 01       	movw	r30, r12
     f08:	46 81       	ldd	r20, Z+6	; 0x06
     f0a:	57 81       	ldd	r21, Z+7	; 0x07
     f0c:	60 e0       	ldi	r22, 0x00	; 0
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	20 2f       	mov	r18, r16
     f12:	c4 01       	movw	r24, r8
     f14:	0e 94 57 05 	call	0xaae	; 0xaae <putval>
     f18:	73 cf       	rjmp	.-282    	; 0xe00 <vfscanf+0x1a>
     f1a:	13 36       	cpi	r17, 0x63	; 99
     f1c:	a9 f4       	brne	.+42     	; 0xf48 <vfscanf+0x162>
     f1e:	01 fd       	sbrc	r16, 1
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <vfscanf+0x140>
     f22:	ff 24       	eor	r15, r15
     f24:	f3 94       	inc	r15
     f26:	c6 01       	movw	r24, r12
     f28:	0e 94 2e 08 	call	0x105c	; 0x105c <fgetc>
     f2c:	97 fd       	sbrc	r25, 7
     f2e:	60 c0       	rjmp	.+192    	; 0xff0 <vfscanf+0x20a>
     f30:	81 14       	cp	r8, r1
     f32:	91 04       	cpc	r9, r1
     f34:	29 f0       	breq	.+10     	; 0xf40 <vfscanf+0x15a>
     f36:	f4 01       	movw	r30, r8
     f38:	80 83       	st	Z, r24
     f3a:	c4 01       	movw	r24, r8
     f3c:	01 96       	adiw	r24, 0x01	; 1
     f3e:	4c 01       	movw	r8, r24
     f40:	fa 94       	dec	r15
     f42:	f1 10       	cpse	r15, r1
     f44:	f0 cf       	rjmp	.-32     	; 0xf26 <vfscanf+0x140>
     f46:	50 c0       	rjmp	.+160    	; 0xfe8 <vfscanf+0x202>
     f48:	1b 35       	cpi	r17, 0x5B	; 91
     f4a:	59 f4       	brne	.+22     	; 0xf62 <vfscanf+0x17c>
     f4c:	9e 01       	movw	r18, r28
     f4e:	a4 01       	movw	r20, r8
     f50:	6f 2d       	mov	r22, r15
     f52:	c6 01       	movw	r24, r12
     f54:	0e 94 35 06 	call	0xc6a	; 0xc6a <conv_brk>
     f58:	ec 01       	movw	r28, r24
     f5a:	89 2b       	or	r24, r25
     f5c:	09 f0       	breq	.+2      	; 0xf60 <vfscanf+0x17a>
     f5e:	44 c0       	rjmp	.+136    	; 0xfe8 <vfscanf+0x202>
     f60:	3e c0       	rjmp	.+124    	; 0xfde <vfscanf+0x1f8>
     f62:	c6 01       	movw	r24, r12
     f64:	0e 94 8a 05 	call	0xb14	; 0xb14 <skip_spaces>
     f68:	97 fd       	sbrc	r25, 7
     f6a:	42 c0       	rjmp	.+132    	; 0xff0 <vfscanf+0x20a>
     f6c:	1f 36       	cpi	r17, 0x6F	; 111
     f6e:	61 f1       	breq	.+88     	; 0xfc8 <vfscanf+0x1e2>
     f70:	28 f4       	brcc	.+10     	; 0xf7c <vfscanf+0x196>
     f72:	14 36       	cpi	r17, 0x64	; 100
     f74:	39 f1       	breq	.+78     	; 0xfc4 <vfscanf+0x1de>
     f76:	19 36       	cpi	r17, 0x69	; 105
     f78:	51 f1       	breq	.+84     	; 0xfce <vfscanf+0x1e8>
     f7a:	28 c0       	rjmp	.+80     	; 0xfcc <vfscanf+0x1e6>
     f7c:	13 37       	cpi	r17, 0x73	; 115
     f7e:	71 f0       	breq	.+28     	; 0xf9c <vfscanf+0x1b6>
     f80:	15 37       	cpi	r17, 0x75	; 117
     f82:	01 f1       	breq	.+64     	; 0xfc4 <vfscanf+0x1de>
     f84:	23 c0       	rjmp	.+70     	; 0xfcc <vfscanf+0x1e6>
     f86:	81 14       	cp	r8, r1
     f88:	91 04       	cpc	r9, r1
     f8a:	29 f0       	breq	.+10     	; 0xf96 <vfscanf+0x1b0>
     f8c:	f4 01       	movw	r30, r8
     f8e:	60 82       	st	Z, r6
     f90:	c4 01       	movw	r24, r8
     f92:	01 96       	adiw	r24, 0x01	; 1
     f94:	4c 01       	movw	r8, r24
     f96:	fa 94       	dec	r15
     f98:	ff 20       	and	r15, r15
     f9a:	71 f0       	breq	.+28     	; 0xfb8 <vfscanf+0x1d2>
     f9c:	c6 01       	movw	r24, r12
     f9e:	0e 94 2e 08 	call	0x105c	; 0x105c <fgetc>
     fa2:	3c 01       	movw	r6, r24
     fa4:	97 fd       	sbrc	r25, 7
     fa6:	08 c0       	rjmp	.+16     	; 0xfb8 <vfscanf+0x1d2>
     fa8:	0e 94 04 08 	call	0x1008	; 0x1008 <isspace>
     fac:	89 2b       	or	r24, r25
     fae:	59 f3       	breq	.-42     	; 0xf86 <vfscanf+0x1a0>
     fb0:	b6 01       	movw	r22, r12
     fb2:	c3 01       	movw	r24, r6
     fb4:	0e 94 a8 08 	call	0x1150	; 0x1150 <ungetc>
     fb8:	81 14       	cp	r8, r1
     fba:	91 04       	cpc	r9, r1
     fbc:	a9 f0       	breq	.+42     	; 0xfe8 <vfscanf+0x202>
     fbe:	f4 01       	movw	r30, r8
     fc0:	10 82       	st	Z, r1
     fc2:	12 c0       	rjmp	.+36     	; 0xfe8 <vfscanf+0x202>
     fc4:	00 62       	ori	r16, 0x20	; 32
     fc6:	03 c0       	rjmp	.+6      	; 0xfce <vfscanf+0x1e8>
     fc8:	00 61       	ori	r16, 0x10	; 16
     fca:	01 c0       	rjmp	.+2      	; 0xfce <vfscanf+0x1e8>
     fcc:	00 64       	ori	r16, 0x40	; 64
     fce:	20 2f       	mov	r18, r16
     fd0:	a4 01       	movw	r20, r8
     fd2:	6f 2d       	mov	r22, r15
     fd4:	c6 01       	movw	r24, r12
     fd6:	0e 94 a3 05 	call	0xb46	; 0xb46 <conv_int>
     fda:	81 11       	cpse	r24, r1
     fdc:	05 c0       	rjmp	.+10     	; 0xfe8 <vfscanf+0x202>
     fde:	f6 01       	movw	r30, r12
     fe0:	83 81       	ldd	r24, Z+3	; 0x03
     fe2:	80 73       	andi	r24, 0x30	; 48
     fe4:	29 f4       	brne	.+10     	; 0xff0 <vfscanf+0x20a>
     fe6:	06 c0       	rjmp	.+12     	; 0xff4 <vfscanf+0x20e>
     fe8:	00 fd       	sbrc	r16, 0
     fea:	0a cf       	rjmp	.-492    	; 0xe00 <vfscanf+0x1a>
     fec:	53 94       	inc	r5
     fee:	08 cf       	rjmp	.-496    	; 0xe00 <vfscanf+0x1a>
     ff0:	55 20       	and	r5, r5
     ff2:	19 f0       	breq	.+6      	; 0xffa <vfscanf+0x214>
     ff4:	85 2d       	mov	r24, r5
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <vfscanf+0x218>
     ffa:	8f ef       	ldi	r24, 0xFF	; 255
     ffc:	9f ef       	ldi	r25, 0xFF	; 255
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
    1002:	ef e0       	ldi	r30, 0x0F	; 15
    1004:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__epilogue_restores__+0x6>

00001008 <isspace>:
    1008:	91 11       	cpse	r25, r1
    100a:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__ctype_isfalse>
    100e:	80 32       	cpi	r24, 0x20	; 32
    1010:	19 f0       	breq	.+6      	; 0x1018 <isspace+0x10>
    1012:	89 50       	subi	r24, 0x09	; 9
    1014:	85 50       	subi	r24, 0x05	; 5
    1016:	c8 f7       	brcc	.-14     	; 0x100a <isspace+0x2>
    1018:	08 95       	ret

0000101a <strchr_P>:
    101a:	fc 01       	movw	r30, r24
    101c:	05 90       	lpm	r0, Z+
    101e:	06 16       	cp	r0, r22
    1020:	21 f0       	breq	.+8      	; 0x102a <strchr_P+0x10>
    1022:	00 20       	and	r0, r0
    1024:	d9 f7       	brne	.-10     	; 0x101c <strchr_P+0x2>
    1026:	c0 01       	movw	r24, r0
    1028:	08 95       	ret
    102a:	31 97       	sbiw	r30, 0x01	; 1
    102c:	cf 01       	movw	r24, r30
    102e:	08 95       	ret

00001030 <strnlen_P>:
    1030:	fc 01       	movw	r30, r24
    1032:	05 90       	lpm	r0, Z+
    1034:	61 50       	subi	r22, 0x01	; 1
    1036:	70 40       	sbci	r23, 0x00	; 0
    1038:	01 10       	cpse	r0, r1
    103a:	d8 f7       	brcc	.-10     	; 0x1032 <strnlen_P+0x2>
    103c:	80 95       	com	r24
    103e:	90 95       	com	r25
    1040:	8e 0f       	add	r24, r30
    1042:	9f 1f       	adc	r25, r31
    1044:	08 95       	ret

00001046 <strnlen>:
    1046:	fc 01       	movw	r30, r24
    1048:	61 50       	subi	r22, 0x01	; 1
    104a:	70 40       	sbci	r23, 0x00	; 0
    104c:	01 90       	ld	r0, Z+
    104e:	01 10       	cpse	r0, r1
    1050:	d8 f7       	brcc	.-10     	; 0x1048 <strnlen+0x2>
    1052:	80 95       	com	r24
    1054:	90 95       	com	r25
    1056:	8e 0f       	add	r24, r30
    1058:	9f 1f       	adc	r25, r31
    105a:	08 95       	ret

0000105c <fgetc>:
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	ec 01       	movw	r28, r24
    1062:	2b 81       	ldd	r18, Y+3	; 0x03
    1064:	20 ff       	sbrs	r18, 0
    1066:	33 c0       	rjmp	.+102    	; 0x10ce <fgetc+0x72>
    1068:	26 ff       	sbrs	r18, 6
    106a:	0a c0       	rjmp	.+20     	; 0x1080 <fgetc+0x24>
    106c:	2f 7b       	andi	r18, 0xBF	; 191
    106e:	2b 83       	std	Y+3, r18	; 0x03
    1070:	8e 81       	ldd	r24, Y+6	; 0x06
    1072:	9f 81       	ldd	r25, Y+7	; 0x07
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	9f 83       	std	Y+7, r25	; 0x07
    1078:	8e 83       	std	Y+6, r24	; 0x06
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	29 c0       	rjmp	.+82     	; 0x10d2 <fgetc+0x76>
    1080:	22 ff       	sbrs	r18, 2
    1082:	0f c0       	rjmp	.+30     	; 0x10a2 <fgetc+0x46>
    1084:	e8 81       	ld	r30, Y
    1086:	f9 81       	ldd	r31, Y+1	; 0x01
    1088:	80 81       	ld	r24, Z
    108a:	08 2e       	mov	r0, r24
    108c:	00 0c       	add	r0, r0
    108e:	99 0b       	sbc	r25, r25
    1090:	00 97       	sbiw	r24, 0x00	; 0
    1092:	19 f4       	brne	.+6      	; 0x109a <fgetc+0x3e>
    1094:	20 62       	ori	r18, 0x20	; 32
    1096:	2b 83       	std	Y+3, r18	; 0x03
    1098:	1a c0       	rjmp	.+52     	; 0x10ce <fgetc+0x72>
    109a:	31 96       	adiw	r30, 0x01	; 1
    109c:	f9 83       	std	Y+1, r31	; 0x01
    109e:	e8 83       	st	Y, r30
    10a0:	0e c0       	rjmp	.+28     	; 0x10be <fgetc+0x62>
    10a2:	ea 85       	ldd	r30, Y+10	; 0x0a
    10a4:	fb 85       	ldd	r31, Y+11	; 0x0b
    10a6:	09 95       	icall
    10a8:	97 ff       	sbrs	r25, 7
    10aa:	09 c0       	rjmp	.+18     	; 0x10be <fgetc+0x62>
    10ac:	2b 81       	ldd	r18, Y+3	; 0x03
    10ae:	01 96       	adiw	r24, 0x01	; 1
    10b0:	11 f0       	breq	.+4      	; 0x10b6 <fgetc+0x5a>
    10b2:	80 e2       	ldi	r24, 0x20	; 32
    10b4:	01 c0       	rjmp	.+2      	; 0x10b8 <fgetc+0x5c>
    10b6:	80 e1       	ldi	r24, 0x10	; 16
    10b8:	82 2b       	or	r24, r18
    10ba:	8b 83       	std	Y+3, r24	; 0x03
    10bc:	08 c0       	rjmp	.+16     	; 0x10ce <fgetc+0x72>
    10be:	2e 81       	ldd	r18, Y+6	; 0x06
    10c0:	3f 81       	ldd	r19, Y+7	; 0x07
    10c2:	2f 5f       	subi	r18, 0xFF	; 255
    10c4:	3f 4f       	sbci	r19, 0xFF	; 255
    10c6:	3f 83       	std	Y+7, r19	; 0x07
    10c8:	2e 83       	std	Y+6, r18	; 0x06
    10ca:	99 27       	eor	r25, r25
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <fgetc+0x76>
    10ce:	8f ef       	ldi	r24, 0xFF	; 255
    10d0:	9f ef       	ldi	r25, 0xFF	; 255
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	08 95       	ret

000010d8 <fputc>:
    10d8:	0f 93       	push	r16
    10da:	1f 93       	push	r17
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	fb 01       	movw	r30, r22
    10e2:	23 81       	ldd	r18, Z+3	; 0x03
    10e4:	21 fd       	sbrc	r18, 1
    10e6:	03 c0       	rjmp	.+6      	; 0x10ee <fputc+0x16>
    10e8:	8f ef       	ldi	r24, 0xFF	; 255
    10ea:	9f ef       	ldi	r25, 0xFF	; 255
    10ec:	2c c0       	rjmp	.+88     	; 0x1146 <fputc+0x6e>
    10ee:	22 ff       	sbrs	r18, 2
    10f0:	16 c0       	rjmp	.+44     	; 0x111e <fputc+0x46>
    10f2:	46 81       	ldd	r20, Z+6	; 0x06
    10f4:	57 81       	ldd	r21, Z+7	; 0x07
    10f6:	24 81       	ldd	r18, Z+4	; 0x04
    10f8:	35 81       	ldd	r19, Z+5	; 0x05
    10fa:	42 17       	cp	r20, r18
    10fc:	53 07       	cpc	r21, r19
    10fe:	44 f4       	brge	.+16     	; 0x1110 <fputc+0x38>
    1100:	a0 81       	ld	r26, Z
    1102:	b1 81       	ldd	r27, Z+1	; 0x01
    1104:	9d 01       	movw	r18, r26
    1106:	2f 5f       	subi	r18, 0xFF	; 255
    1108:	3f 4f       	sbci	r19, 0xFF	; 255
    110a:	31 83       	std	Z+1, r19	; 0x01
    110c:	20 83       	st	Z, r18
    110e:	8c 93       	st	X, r24
    1110:	26 81       	ldd	r18, Z+6	; 0x06
    1112:	37 81       	ldd	r19, Z+7	; 0x07
    1114:	2f 5f       	subi	r18, 0xFF	; 255
    1116:	3f 4f       	sbci	r19, 0xFF	; 255
    1118:	37 83       	std	Z+7, r19	; 0x07
    111a:	26 83       	std	Z+6, r18	; 0x06
    111c:	14 c0       	rjmp	.+40     	; 0x1146 <fputc+0x6e>
    111e:	8b 01       	movw	r16, r22
    1120:	ec 01       	movw	r28, r24
    1122:	fb 01       	movw	r30, r22
    1124:	00 84       	ldd	r0, Z+8	; 0x08
    1126:	f1 85       	ldd	r31, Z+9	; 0x09
    1128:	e0 2d       	mov	r30, r0
    112a:	09 95       	icall
    112c:	89 2b       	or	r24, r25
    112e:	e1 f6       	brne	.-72     	; 0x10e8 <fputc+0x10>
    1130:	d8 01       	movw	r26, r16
    1132:	16 96       	adiw	r26, 0x06	; 6
    1134:	8d 91       	ld	r24, X+
    1136:	9c 91       	ld	r25, X
    1138:	17 97       	sbiw	r26, 0x07	; 7
    113a:	01 96       	adiw	r24, 0x01	; 1
    113c:	17 96       	adiw	r26, 0x07	; 7
    113e:	9c 93       	st	X, r25
    1140:	8e 93       	st	-X, r24
    1142:	16 97       	sbiw	r26, 0x06	; 6
    1144:	ce 01       	movw	r24, r28
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	1f 91       	pop	r17
    114c:	0f 91       	pop	r16
    114e:	08 95       	ret

00001150 <ungetc>:
    1150:	fb 01       	movw	r30, r22
    1152:	23 81       	ldd	r18, Z+3	; 0x03
    1154:	20 ff       	sbrs	r18, 0
    1156:	12 c0       	rjmp	.+36     	; 0x117c <ungetc+0x2c>
    1158:	26 fd       	sbrc	r18, 6
    115a:	10 c0       	rjmp	.+32     	; 0x117c <ungetc+0x2c>
    115c:	8f 3f       	cpi	r24, 0xFF	; 255
    115e:	3f ef       	ldi	r19, 0xFF	; 255
    1160:	93 07       	cpc	r25, r19
    1162:	61 f0       	breq	.+24     	; 0x117c <ungetc+0x2c>
    1164:	82 83       	std	Z+2, r24	; 0x02
    1166:	2f 7d       	andi	r18, 0xDF	; 223
    1168:	20 64       	ori	r18, 0x40	; 64
    116a:	23 83       	std	Z+3, r18	; 0x03
    116c:	26 81       	ldd	r18, Z+6	; 0x06
    116e:	37 81       	ldd	r19, Z+7	; 0x07
    1170:	21 50       	subi	r18, 0x01	; 1
    1172:	31 09       	sbc	r19, r1
    1174:	37 83       	std	Z+7, r19	; 0x07
    1176:	26 83       	std	Z+6, r18	; 0x06
    1178:	99 27       	eor	r25, r25
    117a:	08 95       	ret
    117c:	8f ef       	ldi	r24, 0xFF	; 255
    117e:	9f ef       	ldi	r25, 0xFF	; 255
    1180:	08 95       	ret

00001182 <__ultoa_invert>:
    1182:	fa 01       	movw	r30, r20
    1184:	aa 27       	eor	r26, r26
    1186:	28 30       	cpi	r18, 0x08	; 8
    1188:	51 f1       	breq	.+84     	; 0x11de <__ultoa_invert+0x5c>
    118a:	20 31       	cpi	r18, 0x10	; 16
    118c:	81 f1       	breq	.+96     	; 0x11ee <__ultoa_invert+0x6c>
    118e:	e8 94       	clt
    1190:	6f 93       	push	r22
    1192:	6e 7f       	andi	r22, 0xFE	; 254
    1194:	6e 5f       	subi	r22, 0xFE	; 254
    1196:	7f 4f       	sbci	r23, 0xFF	; 255
    1198:	8f 4f       	sbci	r24, 0xFF	; 255
    119a:	9f 4f       	sbci	r25, 0xFF	; 255
    119c:	af 4f       	sbci	r26, 0xFF	; 255
    119e:	b1 e0       	ldi	r27, 0x01	; 1
    11a0:	3e d0       	rcall	.+124    	; 0x121e <__ultoa_invert+0x9c>
    11a2:	b4 e0       	ldi	r27, 0x04	; 4
    11a4:	3c d0       	rcall	.+120    	; 0x121e <__ultoa_invert+0x9c>
    11a6:	67 0f       	add	r22, r23
    11a8:	78 1f       	adc	r23, r24
    11aa:	89 1f       	adc	r24, r25
    11ac:	9a 1f       	adc	r25, r26
    11ae:	a1 1d       	adc	r26, r1
    11b0:	68 0f       	add	r22, r24
    11b2:	79 1f       	adc	r23, r25
    11b4:	8a 1f       	adc	r24, r26
    11b6:	91 1d       	adc	r25, r1
    11b8:	a1 1d       	adc	r26, r1
    11ba:	6a 0f       	add	r22, r26
    11bc:	71 1d       	adc	r23, r1
    11be:	81 1d       	adc	r24, r1
    11c0:	91 1d       	adc	r25, r1
    11c2:	a1 1d       	adc	r26, r1
    11c4:	20 d0       	rcall	.+64     	; 0x1206 <__ultoa_invert+0x84>
    11c6:	09 f4       	brne	.+2      	; 0x11ca <__ultoa_invert+0x48>
    11c8:	68 94       	set
    11ca:	3f 91       	pop	r19
    11cc:	2a e0       	ldi	r18, 0x0A	; 10
    11ce:	26 9f       	mul	r18, r22
    11d0:	11 24       	eor	r1, r1
    11d2:	30 19       	sub	r19, r0
    11d4:	30 5d       	subi	r19, 0xD0	; 208
    11d6:	31 93       	st	Z+, r19
    11d8:	de f6       	brtc	.-74     	; 0x1190 <__ultoa_invert+0xe>
    11da:	cf 01       	movw	r24, r30
    11dc:	08 95       	ret
    11de:	46 2f       	mov	r20, r22
    11e0:	47 70       	andi	r20, 0x07	; 7
    11e2:	40 5d       	subi	r20, 0xD0	; 208
    11e4:	41 93       	st	Z+, r20
    11e6:	b3 e0       	ldi	r27, 0x03	; 3
    11e8:	0f d0       	rcall	.+30     	; 0x1208 <__ultoa_invert+0x86>
    11ea:	c9 f7       	brne	.-14     	; 0x11de <__ultoa_invert+0x5c>
    11ec:	f6 cf       	rjmp	.-20     	; 0x11da <__ultoa_invert+0x58>
    11ee:	46 2f       	mov	r20, r22
    11f0:	4f 70       	andi	r20, 0x0F	; 15
    11f2:	40 5d       	subi	r20, 0xD0	; 208
    11f4:	4a 33       	cpi	r20, 0x3A	; 58
    11f6:	18 f0       	brcs	.+6      	; 0x11fe <__ultoa_invert+0x7c>
    11f8:	49 5d       	subi	r20, 0xD9	; 217
    11fa:	31 fd       	sbrc	r19, 1
    11fc:	40 52       	subi	r20, 0x20	; 32
    11fe:	41 93       	st	Z+, r20
    1200:	02 d0       	rcall	.+4      	; 0x1206 <__ultoa_invert+0x84>
    1202:	a9 f7       	brne	.-22     	; 0x11ee <__ultoa_invert+0x6c>
    1204:	ea cf       	rjmp	.-44     	; 0x11da <__ultoa_invert+0x58>
    1206:	b4 e0       	ldi	r27, 0x04	; 4
    1208:	a6 95       	lsr	r26
    120a:	97 95       	ror	r25
    120c:	87 95       	ror	r24
    120e:	77 95       	ror	r23
    1210:	67 95       	ror	r22
    1212:	ba 95       	dec	r27
    1214:	c9 f7       	brne	.-14     	; 0x1208 <__ultoa_invert+0x86>
    1216:	00 97       	sbiw	r24, 0x00	; 0
    1218:	61 05       	cpc	r22, r1
    121a:	71 05       	cpc	r23, r1
    121c:	08 95       	ret
    121e:	9b 01       	movw	r18, r22
    1220:	ac 01       	movw	r20, r24
    1222:	0a 2e       	mov	r0, r26
    1224:	06 94       	lsr	r0
    1226:	57 95       	ror	r21
    1228:	47 95       	ror	r20
    122a:	37 95       	ror	r19
    122c:	27 95       	ror	r18
    122e:	ba 95       	dec	r27
    1230:	c9 f7       	brne	.-14     	; 0x1224 <__ultoa_invert+0xa2>
    1232:	62 0f       	add	r22, r18
    1234:	73 1f       	adc	r23, r19
    1236:	84 1f       	adc	r24, r20
    1238:	95 1f       	adc	r25, r21
    123a:	a0 1d       	adc	r26, r0
    123c:	08 95       	ret

0000123e <__ctype_isfalse>:
    123e:	99 27       	eor	r25, r25
    1240:	88 27       	eor	r24, r24

00001242 <__ctype_istrue>:
    1242:	08 95       	ret

00001244 <__prologue_saves__>:
    1244:	2f 92       	push	r2
    1246:	3f 92       	push	r3
    1248:	4f 92       	push	r4
    124a:	5f 92       	push	r5
    124c:	6f 92       	push	r6
    124e:	7f 92       	push	r7
    1250:	8f 92       	push	r8
    1252:	9f 92       	push	r9
    1254:	af 92       	push	r10
    1256:	bf 92       	push	r11
    1258:	cf 92       	push	r12
    125a:	df 92       	push	r13
    125c:	ef 92       	push	r14
    125e:	ff 92       	push	r15
    1260:	0f 93       	push	r16
    1262:	1f 93       	push	r17
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	ca 1b       	sub	r28, r26
    126e:	db 0b       	sbc	r29, r27
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	de bf       	out	0x3e, r29	; 62
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	cd bf       	out	0x3d, r28	; 61
    127a:	09 94       	ijmp

0000127c <__epilogue_restores__>:
    127c:	2a 88       	ldd	r2, Y+18	; 0x12
    127e:	39 88       	ldd	r3, Y+17	; 0x11
    1280:	48 88       	ldd	r4, Y+16	; 0x10
    1282:	5f 84       	ldd	r5, Y+15	; 0x0f
    1284:	6e 84       	ldd	r6, Y+14	; 0x0e
    1286:	7d 84       	ldd	r7, Y+13	; 0x0d
    1288:	8c 84       	ldd	r8, Y+12	; 0x0c
    128a:	9b 84       	ldd	r9, Y+11	; 0x0b
    128c:	aa 84       	ldd	r10, Y+10	; 0x0a
    128e:	b9 84       	ldd	r11, Y+9	; 0x09
    1290:	c8 84       	ldd	r12, Y+8	; 0x08
    1292:	df 80       	ldd	r13, Y+7	; 0x07
    1294:	ee 80       	ldd	r14, Y+6	; 0x06
    1296:	fd 80       	ldd	r15, Y+5	; 0x05
    1298:	0c 81       	ldd	r16, Y+4	; 0x04
    129a:	1b 81       	ldd	r17, Y+3	; 0x03
    129c:	aa 81       	ldd	r26, Y+2	; 0x02
    129e:	b9 81       	ldd	r27, Y+1	; 0x01
    12a0:	ce 0f       	add	r28, r30
    12a2:	d1 1d       	adc	r29, r1
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	ed 01       	movw	r28, r26
    12b0:	08 95       	ret

000012b2 <_exit>:
    12b2:	f8 94       	cli

000012b4 <__stop_program>:
    12b4:	ff cf       	rjmp	.-2      	; 0x12b4 <__stop_program>

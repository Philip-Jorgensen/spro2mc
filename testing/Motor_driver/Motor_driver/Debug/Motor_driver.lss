
Motor_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000a92  00000b26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080012a  0080012a  00000b50  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011bb  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000991  00000000  00000000  00001e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008aa  00000000  00000000  00002830  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  000030dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053c  00000000  00000000  000032d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000942  00000000  00000000  0000380c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000414e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  68:	55 01       	movw	r10, r10
  6a:	f2 00       	.word	0x00f2	; ????
  6c:	58 01       	movw	r10, r16
  6e:	f5 00       	.word	0x00f5	; ????
  70:	4f 01       	movw	r8, r30
  72:	ef 00       	.word	0x00ef	; ????
  74:	52 01       	movw	r10, r4
  76:	f8 00       	.word	0x00f8	; ????
  78:	79 01       	movw	r14, r18
  7a:	7e 01       	movw	r14, r28
  7c:	83 01       	movw	r16, r6
  7e:	88 01       	movw	r16, r16
  80:	8d 01       	movw	r16, r26
  82:	92 01       	movw	r18, r4
  84:	97 01       	movw	r18, r14
  86:	9c 01       	movw	r18, r24

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf ef       	ldi	r28, 0xFF	; 255
  8e:	d8 e0       	ldi	r29, 0x08	; 8
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
  94:	11 e0       	ldi	r17, 0x01	; 1
  96:	a0 e0       	ldi	r26, 0x00	; 0
  98:	b1 e0       	ldi	r27, 0x01	; 1
  9a:	e2 e9       	ldi	r30, 0x92	; 146
  9c:	fa e0       	ldi	r31, 0x0A	; 10
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <__do_copy_data+0x10>
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	aa 32       	cpi	r26, 0x2A	; 42
  a6:	b1 07       	cpc	r27, r17
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0xc>

000000aa <__do_clear_bss>:
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	aa e2       	ldi	r26, 0x2A	; 42
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
  b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
  b4:	a1 33       	cpi	r26, 0x31	; 49
  b6:	b2 07       	cpc	r27, r18
  b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>
  ba:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  be:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <_exit>

000000c2 <__bad_interrupt>:
  c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <main>:
void control_motor(unsigned char , unsigned char , unsigned int , unsigned int );

int main(void)
{
	
	uart_init(); // Open the communication to the micro controller
  c6:	0e 94 47 02 	call	0x48e	; 0x48e <uart_init>
	i2c_init(); // Initialize the i2c communication.
  ca:	0e 94 e7 01 	call	0x3ce	; 0x3ce <i2c_init>
	io_redirect(); // Redirect the input/output to the computer.
  ce:	0e 94 58 02 	call	0x4b0	; 0x4b0 <io_redirect>
	
	// Make sure all the motors are stopped from the beginning (Initialization)
	motor_init_pwm(PWM_FREQUENCY_200);
  d2:	8e e1       	ldi	r24, 0x1E	; 30
  d4:	0e 94 bc 01 	call	0x378	; 0x378 <motor_init_pwm>
	
	printf("Adafruit 1438");
  d8:	8c e1       	ldi	r24, 0x1C	; 28
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	9f 93       	push	r25
  de:	8f 93       	push	r24
  e0:	0e 94 69 02 	call	0x4d2	; 0x4d2 <printf>
	
	// M1,..,M4 are ports on the "Adafruit 1438"
	motor_set_state(M1, STOP);
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <motor_set_state>
	motor_set_state(M2, STOP);
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <motor_set_state>
	motor_set_state(M3, STOP);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <motor_set_state>
	motor_set_state(M4, STOP);
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	84 e0       	ldi	r24, 0x04	; 4
 100:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <motor_set_state>
	
	motor_set_state(M1, CW);
 104:	61 e0       	ldi	r22, 0x01	; 1
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <motor_set_state>
	motor_set_pwm(M1, 0, 0x1ff);
 10c:	4f ef       	ldi	r20, 0xFF	; 255
 10e:	51 e0       	ldi	r21, 0x01	; 1
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 5d 01 	call	0x2ba	; 0x2ba <motor_set_pwm>
 11a:	0f 90       	pop	r0
 11c:	0f 90       	pop	r0
 11e:	ff cf       	rjmp	.-2      	; 0x11e <main+0x58>

00000120 <motor_set8574_controlpin>:
#include "i2cmaster.h"

void motor_set8574_controlpin(unsigned char bit_number, unsigned char level)
{
	static unsigned char out_byte = 0;
	if(level == LOW)
 120:	61 11       	cpse	r22, r1
 122:	10 c0       	rjmp	.+32     	; 0x144 <motor_set8574_controlpin+0x24>
		out_byte &= ~(1<<bit_number);
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	a9 01       	movw	r20, r18
 12a:	02 c0       	rjmp	.+4      	; 0x130 <motor_set8574_controlpin+0x10>
 12c:	44 0f       	add	r20, r20
 12e:	55 1f       	adc	r21, r21
 130:	8a 95       	dec	r24
 132:	e2 f7       	brpl	.-8      	; 0x12c <motor_set8574_controlpin+0xc>
 134:	ca 01       	movw	r24, r20
 136:	80 95       	com	r24
 138:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <__data_end>
 13c:	89 23       	and	r24, r25
 13e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
 142:	10 c0       	rjmp	.+32     	; 0x164 <motor_set8574_controlpin+0x44>
	if(level==HIGH)
 144:	61 30       	cpi	r22, 0x01	; 1
 146:	71 f4       	brne	.+28     	; 0x164 <motor_set8574_controlpin+0x44>
		out_byte |= (1<<bit_number);
 148:	21 e0       	ldi	r18, 0x01	; 1
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	a9 01       	movw	r20, r18
 14e:	02 c0       	rjmp	.+4      	; 0x154 <motor_set8574_controlpin+0x34>
 150:	44 0f       	add	r20, r20
 152:	55 1f       	adc	r21, r21
 154:	8a 95       	dec	r24
 156:	e2 f7       	brpl	.-8      	; 0x150 <motor_set8574_controlpin+0x30>
 158:	ca 01       	movw	r24, r20
 15a:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <__data_end>
 15e:	89 2b       	or	r24, r25
 160:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
	i2c_start(PCF8574_ADR + I2C_WRITE);
 164:	80 e7       	ldi	r24, 0x70	; 112
 166:	0e 94 ed 01 	call	0x3da	; 0x3da <i2c_start>
	i2c_write(out_byte);
 16a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 16e:	0e 94 1d 02 	call	0x43a	; 0x43a <i2c_write>
	i2c_stop();
 172:	0e 94 14 02 	call	0x428	; 0x428 <i2c_stop>
 176:	08 95       	ret

00000178 <motor_set1438_controlpin>:
}


void motor_set1438_controlpin(unsigned char pin_adr, unsigned char level)
{
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	d8 2f       	mov	r29, r24
 17e:	c6 2f       	mov	r28, r22
	i2c_start(PCA_ADR + I2C_WRITE);
 180:	80 ec       	ldi	r24, 0xC0	; 192
 182:	0e 94 ed 01 	call	0x3da	; 0x3da <i2c_start>
	i2c_write(pin_adr);
 186:	8d 2f       	mov	r24, r29
 188:	0e 94 1d 02 	call	0x43a	; 0x43a <i2c_write>
	if(level == LOW)
 18c:	c1 11       	cpse	r28, r1
 18e:	0a c0       	rjmp	.+20     	; 0x1a4 <motor_set1438_controlpin+0x2c>
	{
		i2c_write(0x00); i2c_write(0x00); i2c_write(0x10);
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 1d 02 	call	0x43a	; 0x43a <i2c_write>
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	0e 94 1d 02 	call	0x43a	; 0x43a <i2c_write>
 19c:	80 e1       	ldi	r24, 0x10	; 16
 19e:	0e 94 1d 02 	call	0x43a	; 0x43a <i2c_write>
 1a2:	0b c0       	rjmp	.+22     	; 0x1ba <motor_set1438_controlpin+0x42>
	}
	if(level==HIGH)
 1a4:	c1 30       	cpi	r28, 0x01	; 1
 1a6:	49 f4       	brne	.+18     	; 0x1ba <motor_set1438_controlpin+0x42>
	{
		i2c_write(0x10); i2c_write(0x00); i2c_write(0x00);
 1a8:	80 e1       	ldi	r24, 0x10	; 16
 1aa:	0e 94 1d 02 	call	0x43a	; 0x43a <i2c_write>
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	0e 94 1d 02 	call	0x43a	; 0x43a <i2c_write>
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	0e 94 1d 02 	call	0x43a	; 0x43a <i2c_write>
	}
	i2c_stop();
 1ba:	0e 94 14 02 	call	0x428	; 0x428 <i2c_stop>
}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <motor_set_state>:

void motor_set_state(unsigned char motor_number, unsigned char state)
{
 1c4:	cf 93       	push	r28
 1c6:	96 2f       	mov	r25, r22
	unsigned char in1=0, in2=0;
	
	switch(motor_number)
 1c8:	48 2f       	mov	r20, r24
 1ca:	50 e0       	ldi	r21, 0x00	; 0
 1cc:	fa 01       	movw	r30, r20
 1ce:	31 97       	sbiw	r30, 0x01	; 1
 1d0:	e8 30       	cpi	r30, 0x08	; 8
 1d2:	f1 05       	cpc	r31, r1
 1d4:	80 f4       	brcc	.+32     	; 0x1f6 <motor_set_state+0x32>
 1d6:	ec 5c       	subi	r30, 0xCC	; 204
 1d8:	ff 4f       	sbci	r31, 0xFF	; 255
 1da:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__tablejump2__>
		case M1:	in1=M1_IN1+1; in2=M1_IN2+1; break; // High byte of reg
		case M2: 	in1=M2_IN1+1; in2=M2_IN2+1; break; // High byte of reg
		case M3:	in1=M3_IN1+1; in2=M3_IN2+1; break; // High byte of reg
		case M4:	in1=M4_IN1+1; in2=M4_IN2+1; break; // High byte of reg
		case M5:	in1=M5_IN1; in2=M5_IN2; break;		// Set bit position
		case M6:	in1=M6_IN1; in2=M6_IN2; break;		// Set bit position
 1de:	c3 e0       	ldi	r28, 0x03	; 3
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	36 c0       	rjmp	.+108    	; 0x250 <motor_set_state+0x8c>
	unsigned char in1=0, in2=0;
	
	switch(motor_number)
	{
		case M1:	in1=M1_IN1+1; in2=M1_IN2+1; break; // High byte of reg
		case M2: 	in1=M2_IN1+1; in2=M2_IN2+1; break; // High byte of reg
 1e4:	c7 e3       	ldi	r28, 0x37	; 55
 1e6:	83 e3       	ldi	r24, 0x33	; 51
 1e8:	0a c0       	rjmp	.+20     	; 0x1fe <motor_set_state+0x3a>
		case M3:	in1=M3_IN1+1; in2=M3_IN2+1; break; // High byte of reg
		case M4:	in1=M4_IN1+1; in2=M4_IN2+1; break; // High byte of reg
 1ea:	cf e1       	ldi	r28, 0x1F	; 31
 1ec:	8b e1       	ldi	r24, 0x1B	; 27
 1ee:	07 c0       	rjmp	.+14     	; 0x1fe <motor_set_state+0x3a>
		case M5:	in1=M5_IN1; in2=M5_IN2; break;		// Set bit position
		case M6:	in1=M6_IN1; in2=M6_IN2; break;		// Set bit position
		case M7:	in1=M7_IN1; in2=M7_IN2; break;		// Set bit position
		case M8:	in1=M8_IN1; in2=M8_IN2; break;		// Set bit position
 1f0:	c7 e0       	ldi	r28, 0x07	; 7
 1f2:	86 e0       	ldi	r24, 0x06	; 6
 1f4:	2d c0       	rjmp	.+90     	; 0x250 <motor_set_state+0x8c>
	}
	if(motor_number < 5)			// M1 - M4
 1f6:	85 30       	cpi	r24, 0x05	; 5
 1f8:	48 f5       	brcc	.+82     	; 0x24c <motor_set_state+0x88>
	i2c_stop();
}

void motor_set_state(unsigned char motor_number, unsigned char state)
{
	unsigned char in1=0, in2=0;
 1fa:	c0 e0       	ldi	r28, 0x00	; 0
 1fc:	80 e0       	ldi	r24, 0x00	; 0
		case M7:	in1=M7_IN1; in2=M7_IN2; break;		// Set bit position
		case M8:	in1=M8_IN1; in2=M8_IN2; break;		// Set bit position
	}
	if(motor_number < 5)			// M1 - M4
	{
		switch(state)
 1fe:	92 30       	cpi	r25, 0x02	; 2
 200:	29 f0       	breq	.+10     	; 0x20c <motor_set_state+0x48>
 202:	93 30       	cpi	r25, 0x03	; 3
 204:	99 f0       	breq	.+38     	; 0x22c <motor_set_state+0x68>
 206:	91 30       	cpi	r25, 0x01	; 1
 208:	c9 f4       	brne	.+50     	; 0x23c <motor_set_state+0x78>
 20a:	08 c0       	rjmp	.+16     	; 0x21c <motor_set_state+0x58>
		{
		
			case CCW:		motor_set1438_controlpin(in1, LOW); motor_set1438_controlpin(in2, HIGH); break;  // IN1=0, IN2=1
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	0e 94 bc 00 	call	0x178	; 0x178 <motor_set1438_controlpin>
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	8c 2f       	mov	r24, r28
 216:	0e 94 bc 00 	call	0x178	; 0x178 <motor_set1438_controlpin>
 21a:	4d c0       	rjmp	.+154    	; 0x2b6 <motor_set_state+0xf2>
			case CW:		motor_set1438_controlpin(in1, HIGH); motor_set1438_controlpin(in2, LOW); break;	// IN1=1, IN2=0
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	0e 94 bc 00 	call	0x178	; 0x178 <motor_set1438_controlpin>
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	8c 2f       	mov	r24, r28
 226:	0e 94 bc 00 	call	0x178	; 0x178 <motor_set1438_controlpin>
 22a:	45 c0       	rjmp	.+138    	; 0x2b6 <motor_set_state+0xf2>
			case BRAKE:		motor_set1438_controlpin(in1, HIGH); motor_set1438_controlpin(in2, HIGH);break;	// IN1=1, IN2=1
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	0e 94 bc 00 	call	0x178	; 0x178 <motor_set1438_controlpin>
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	8c 2f       	mov	r24, r28
 236:	0e 94 bc 00 	call	0x178	; 0x178 <motor_set1438_controlpin>
 23a:	3d c0       	rjmp	.+122    	; 0x2b6 <motor_set_state+0xf2>
			case STOP:
			default:		motor_set1438_controlpin(in1, LOW); motor_set1438_controlpin(in2, LOW);	// IN1=0, IN2=0
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	0e 94 bc 00 	call	0x178	; 0x178 <motor_set1438_controlpin>
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	8c 2f       	mov	r24, r28
 246:	0e 94 bc 00 	call	0x178	; 0x178 <motor_set1438_controlpin>
 24a:	35 c0       	rjmp	.+106    	; 0x2b6 <motor_set_state+0xf2>
	i2c_stop();
}

void motor_set_state(unsigned char motor_number, unsigned char state)
{
	unsigned char in1=0, in2=0;
 24c:	c0 e0       	ldi	r28, 0x00	; 0
 24e:	80 e0       	ldi	r24, 0x00	; 0
			default:		motor_set1438_controlpin(in1, LOW); motor_set1438_controlpin(in2, LOW);	// IN1=0, IN2=0
		}
	}
	else							// M5 - M8
	{
		switch(state)
 250:	92 30       	cpi	r25, 0x02	; 2
 252:	29 f0       	breq	.+10     	; 0x25e <motor_set_state+0x9a>
 254:	93 30       	cpi	r25, 0x03	; 3
 256:	99 f0       	breq	.+38     	; 0x27e <motor_set_state+0xba>
 258:	91 30       	cpi	r25, 0x01	; 1
 25a:	c9 f4       	brne	.+50     	; 0x28e <motor_set_state+0xca>
 25c:	08 c0       	rjmp	.+16     	; 0x26e <motor_set_state+0xaa>
		{
			case CCW:		motor_set8574_controlpin(in1, LOW); motor_set8574_controlpin(in2, HIGH); break;  // IN1=0, IN2=1
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	0e 94 90 00 	call	0x120	; 0x120 <motor_set8574_controlpin>
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	8c 2f       	mov	r24, r28
 268:	0e 94 90 00 	call	0x120	; 0x120 <motor_set8574_controlpin>
 26c:	24 c0       	rjmp	.+72     	; 0x2b6 <motor_set_state+0xf2>
			case CW:		motor_set8574_controlpin(in1, HIGH); motor_set8574_controlpin(in2, LOW); break;	// IN1=1, IN2=0
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	0e 94 90 00 	call	0x120	; 0x120 <motor_set8574_controlpin>
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	8c 2f       	mov	r24, r28
 278:	0e 94 90 00 	call	0x120	; 0x120 <motor_set8574_controlpin>
 27c:	1c c0       	rjmp	.+56     	; 0x2b6 <motor_set_state+0xf2>
			case BRAKE:		motor_set8574_controlpin(in1, HIGH); motor_set8574_controlpin(in2, HIGH);break;	// IN1=1, IN2=1
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	0e 94 90 00 	call	0x120	; 0x120 <motor_set8574_controlpin>
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	8c 2f       	mov	r24, r28
 288:	0e 94 90 00 	call	0x120	; 0x120 <motor_set8574_controlpin>
 28c:	14 c0       	rjmp	.+40     	; 0x2b6 <motor_set_state+0xf2>
			case STOP:
			default:		motor_set8574_controlpin(in1, LOW); motor_set8574_controlpin(in2, LOW);	// IN1=0, IN2=0
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	0e 94 90 00 	call	0x120	; 0x120 <motor_set8574_controlpin>
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	8c 2f       	mov	r24, r28
 298:	0e 94 90 00 	call	0x120	; 0x120 <motor_set8574_controlpin>
		}
	}
}
 29c:	0c c0       	rjmp	.+24     	; 0x2b6 <motor_set_state+0xf2>
	{
		case M1:	in1=M1_IN1+1; in2=M1_IN2+1; break; // High byte of reg
		case M2: 	in1=M2_IN1+1; in2=M2_IN2+1; break; // High byte of reg
		case M3:	in1=M3_IN1+1; in2=M3_IN2+1; break; // High byte of reg
		case M4:	in1=M4_IN1+1; in2=M4_IN2+1; break; // High byte of reg
		case M5:	in1=M5_IN1; in2=M5_IN2; break;		// Set bit position
 29e:	c1 e0       	ldi	r28, 0x01	; 1
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	d6 cf       	rjmp	.-84     	; 0x250 <motor_set_state+0x8c>
		case M6:	in1=M6_IN1; in2=M6_IN2; break;		// Set bit position
		case M7:	in1=M7_IN1; in2=M7_IN2; break;		// Set bit position
 2a4:	c5 e0       	ldi	r28, 0x05	; 5
 2a6:	84 e0       	ldi	r24, 0x04	; 4
 2a8:	d3 cf       	rjmp	.-90     	; 0x250 <motor_set_state+0x8c>
{
	unsigned char in1=0, in2=0;
	
	switch(motor_number)
	{
		case M1:	in1=M1_IN1+1; in2=M1_IN2+1; break; // High byte of reg
 2aa:	cb e2       	ldi	r28, 0x2B	; 43
 2ac:	8f e2       	ldi	r24, 0x2F	; 47
 2ae:	a7 cf       	rjmp	.-178    	; 0x1fe <motor_set_state+0x3a>
		case M2: 	in1=M2_IN1+1; in2=M2_IN2+1; break; // High byte of reg
		case M3:	in1=M3_IN1+1; in2=M3_IN2+1; break; // High byte of reg
 2b0:	c3 e1       	ldi	r28, 0x13	; 19
 2b2:	87 e1       	ldi	r24, 0x17	; 23
 2b4:	a4 cf       	rjmp	.-184    	; 0x1fe <motor_set_state+0x3a>
			case BRAKE:		motor_set8574_controlpin(in1, HIGH); motor_set8574_controlpin(in2, HIGH);break;	// IN1=1, IN2=1
			case STOP:
			default:		motor_set8574_controlpin(in1, LOW); motor_set8574_controlpin(in2, LOW);	// IN1=0, IN2=0
		}
	}
}
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <motor_set_pwm>:

void motor_set_pwm(unsigned char motor_number, unsigned int on_value, unsigned int off_value)
{
 2ba:	ff 92       	push	r15
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	8b 01       	movw	r16, r22
 2c6:	ea 01       	movw	r28, r20
	unsigned char pwm_reg=0;
	if(on_value > 0xFFF) on_value = 0;
 2c8:	61 15       	cp	r22, r1
 2ca:	70 41       	sbci	r23, 0x10	; 16
 2cc:	10 f0       	brcs	.+4      	; 0x2d2 <motor_set_pwm+0x18>
 2ce:	00 e0       	ldi	r16, 0x00	; 0
 2d0:	10 e0       	ldi	r17, 0x00	; 0
	if(off_value > 0xFFF) off_value = 0;
 2d2:	c1 15       	cp	r28, r1
 2d4:	90 e1       	ldi	r25, 0x10	; 16
 2d6:	d9 07       	cpc	r29, r25
 2d8:	10 f0       	brcs	.+4      	; 0x2de <motor_set_pwm+0x24>
 2da:	c0 e0       	ldi	r28, 0x00	; 0
 2dc:	d0 e0       	ldi	r29, 0x00	; 0
	
	switch(motor_number)
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	fc 01       	movw	r30, r24
 2e2:	31 97       	sbiw	r30, 0x01	; 1
 2e4:	e8 30       	cpi	r30, 0x08	; 8
 2e6:	f1 05       	cpc	r31, r1
 2e8:	60 f5       	brcc	.+88     	; 0x342 <motor_set_pwm+0x88>
 2ea:	e4 5c       	subi	r30, 0xC4	; 196
 2ec:	ff 4f       	sbci	r31, 0xFF	; 255
 2ee:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__tablejump2__>
	{
		case M1:	pwm_reg = M1_PWM; break;
 2f2:	0f 2e       	mov	r0, r31
 2f4:	f6 e2       	ldi	r31, 0x26	; 38
 2f6:	ff 2e       	mov	r15, r31
 2f8:	f0 2d       	mov	r31, r0
 2fa:	24 c0       	rjmp	.+72     	; 0x344 <motor_set_pwm+0x8a>
		case M2:	pwm_reg = M2_PWM; break;
 2fc:	0f 2e       	mov	r0, r31
 2fe:	fa e3       	ldi	r31, 0x3A	; 58
 300:	ff 2e       	mov	r15, r31
 302:	f0 2d       	mov	r31, r0
 304:	1f c0       	rjmp	.+62     	; 0x344 <motor_set_pwm+0x8a>
		case M3:	pwm_reg = M3_PWM; break;
 306:	0f 2e       	mov	r0, r31
 308:	fe e0       	ldi	r31, 0x0E	; 14
 30a:	ff 2e       	mov	r15, r31
 30c:	f0 2d       	mov	r31, r0
 30e:	1a c0       	rjmp	.+52     	; 0x344 <motor_set_pwm+0x8a>
		case M4:	pwm_reg = M4_PWM; break;
 310:	0f 2e       	mov	r0, r31
 312:	f2 e2       	ldi	r31, 0x22	; 34
 314:	ff 2e       	mov	r15, r31
 316:	f0 2d       	mov	r31, r0
 318:	15 c0       	rjmp	.+42     	; 0x344 <motor_set_pwm+0x8a>
		case M5:	pwm_reg = M5_PWM; break;
 31a:	0f 2e       	mov	r0, r31
 31c:	f6 e0       	ldi	r31, 0x06	; 6
 31e:	ff 2e       	mov	r15, r31
 320:	f0 2d       	mov	r31, r0
 322:	10 c0       	rjmp	.+32     	; 0x344 <motor_set_pwm+0x8a>
		case M6:	pwm_reg = M6_PWM; break;
 324:	0f 2e       	mov	r0, r31
 326:	fa e0       	ldi	r31, 0x0A	; 10
 328:	ff 2e       	mov	r15, r31
 32a:	f0 2d       	mov	r31, r0
 32c:	0b c0       	rjmp	.+22     	; 0x344 <motor_set_pwm+0x8a>
		case M7:	pwm_reg = M7_PWM; break;
 32e:	0f 2e       	mov	r0, r31
 330:	fe e3       	ldi	r31, 0x3E	; 62
 332:	ff 2e       	mov	r15, r31
 334:	f0 2d       	mov	r31, r0
 336:	06 c0       	rjmp	.+12     	; 0x344 <motor_set_pwm+0x8a>
		case M8:	pwm_reg = M8_PWM; break;
 338:	0f 2e       	mov	r0, r31
 33a:	f2 e4       	ldi	r31, 0x42	; 66
 33c:	ff 2e       	mov	r15, r31
 33e:	f0 2d       	mov	r31, r0
 340:	01 c0       	rjmp	.+2      	; 0x344 <motor_set_pwm+0x8a>
	}
}

void motor_set_pwm(unsigned char motor_number, unsigned int on_value, unsigned int off_value)
{
	unsigned char pwm_reg=0;
 342:	f1 2c       	mov	r15, r1
		case M5:	pwm_reg = M5_PWM; break;
		case M6:	pwm_reg = M6_PWM; break;
		case M7:	pwm_reg = M7_PWM; break;
		case M8:	pwm_reg = M8_PWM; break;
	}
	i2c_start(PCA_ADR + I2C_WRITE);
 344:	80 ec       	ldi	r24, 0xC0	; 192
 346:	0e 94 ed 01 	call	0x3da	; 0x3da <i2c_start>
	i2c_write(pwm_reg);
 34a:	8f 2d       	mov	r24, r15
 34c:	0e 94 1d 02 	call	0x43a	; 0x43a <i2c_write>
	i2c_write(on_value&0x0FF);
 350:	80 2f       	mov	r24, r16
 352:	0e 94 1d 02 	call	0x43a	; 0x43a <i2c_write>
	on_value >>= 8;
	i2c_write(on_value);
 356:	81 2f       	mov	r24, r17
 358:	0e 94 1d 02 	call	0x43a	; 0x43a <i2c_write>
	i2c_write(off_value & 0x0FF);
 35c:	8c 2f       	mov	r24, r28
 35e:	0e 94 1d 02 	call	0x43a	; 0x43a <i2c_write>
	off_value >>= 8;
	i2c_write(off_value);
 362:	8d 2f       	mov	r24, r29
 364:	0e 94 1d 02 	call	0x43a	; 0x43a <i2c_write>
	i2c_stop();
 368:	0e 94 14 02 	call	0x428	; 0x428 <i2c_stop>
}
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	0f 91       	pop	r16
 374:	ff 90       	pop	r15
 376:	08 95       	ret

00000378 <motor_init_pwm>:

void motor_init_pwm(unsigned char frequency)  // INIT PCA9685 AND PCA8574
{
 378:	cf 93       	push	r28
 37a:	c8 2f       	mov	r28, r24
	i2c_start(PCA_ADR + I2C_WRITE);
 37c:	80 ec       	ldi	r24, 0xC0	; 192
 37e:	0e 94 ed 01 	call	0x3da	; 0x3da <i2c_start>
	i2c_write(0x00);
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 1d 02 	call	0x43a	; 0x43a <i2c_write>
	i2c_write(0b00110000);					// sleep and autoinc
 388:	80 e3       	ldi	r24, 0x30	; 48
 38a:	0e 94 1d 02 	call	0x43a	; 0x43a <i2c_write>
	i2c_stop();
 38e:	0e 94 14 02 	call	0x428	; 0x428 <i2c_stop>
	
	i2c_start(PCA_ADR + I2C_WRITE);
 392:	80 ec       	ldi	r24, 0xC0	; 192
 394:	0e 94 ed 01 	call	0x3da	; 0x3da <i2c_start>
	i2c_write(0xFE);
 398:	8e ef       	ldi	r24, 0xFE	; 254
 39a:	0e 94 1d 02 	call	0x43a	; 0x43a <i2c_write>
	i2c_write(frequency);						
 39e:	8c 2f       	mov	r24, r28
 3a0:	0e 94 1d 02 	call	0x43a	; 0x43a <i2c_write>
	
	i2c_start(PCA_ADR + I2C_WRITE);
 3a4:	80 ec       	ldi	r24, 0xC0	; 192
 3a6:	0e 94 ed 01 	call	0x3da	; 0x3da <i2c_start>
	i2c_write(0x00);
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	0e 94 1d 02 	call	0x43a	; 0x43a <i2c_write>
	i2c_write(0b00100000);					// autoinc
 3b0:	80 e2       	ldi	r24, 0x20	; 32
 3b2:	0e 94 1d 02 	call	0x43a	; 0x43a <i2c_write>
	i2c_stop();	
 3b6:	0e 94 14 02 	call	0x428	; 0x428 <i2c_stop>
	
	i2c_start(PCF8574_ADR + I2C_WRITE);		// All PCF8574 outputs low
 3ba:	80 e7       	ldi	r24, 0x70	; 112
 3bc:	0e 94 ed 01 	call	0x3da	; 0x3da <i2c_start>
	i2c_write(0x00);
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	0e 94 1d 02 	call	0x43a	; 0x43a <i2c_write>
	i2c_stop();
 3c6:	0e 94 14 02 	call	0x428	; 0x428 <i2c_stop>
 3ca:	cf 91       	pop	r28
 3cc:	08 95       	ret

000003ce <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
 3ce:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 3d2:	88 e4       	ldi	r24, 0x48	; 72
 3d4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 3d8:	08 95       	ret

000003da <i2c_start>:
 3da:	94 ea       	ldi	r25, 0xA4	; 164
 3dc:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 3e0:	ec eb       	ldi	r30, 0xBC	; 188
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	90 81       	ld	r25, Z
 3e6:	99 23       	and	r25, r25
 3e8:	ec f7       	brge	.-6      	; 0x3e4 <i2c_start+0xa>
 3ea:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 3ee:	98 7f       	andi	r25, 0xF8	; 248
 3f0:	98 30       	cpi	r25, 0x08	; 8
 3f2:	11 f0       	breq	.+4      	; 0x3f8 <i2c_start+0x1e>
 3f4:	90 31       	cpi	r25, 0x10	; 16
 3f6:	a1 f4       	brne	.+40     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 3fc:	84 e8       	ldi	r24, 0x84	; 132
 3fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 402:	ec eb       	ldi	r30, 0xBC	; 188
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	88 23       	and	r24, r24
 40a:	ec f7       	brge	.-6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 410:	98 7f       	andi	r25, 0xF8	; 248
 412:	98 31       	cpi	r25, 0x18	; 24
 414:	39 f0       	breq	.+14     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 34       	cpi	r25, 0x40	; 64
 41a:	29 f4       	brne	.+10     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	08 95       	ret
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	08 95       	ret
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	08 95       	ret

00000428 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 428:	84 e9       	ldi	r24, 0x94	; 148
 42a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 42e:	ec eb       	ldi	r30, 0xBC	; 188
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	80 81       	ld	r24, Z
 434:	84 fd       	sbrc	r24, 4
 436:	fd cf       	rjmp	.-6      	; 0x432 <i2c_stop+0xa>

}/* i2c_stop */
 438:	08 95       	ret

0000043a <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 43a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
 43e:	84 e8       	ldi	r24, 0x84	; 132
 440:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 444:	ec eb       	ldi	r30, 0xBC	; 188
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	80 81       	ld	r24, Z
 44a:	88 23       	and	r24, r24
 44c:	ec f7       	brge	.-6      	; 0x448 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 44e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 452:	98 7f       	andi	r25, 0xF8	; 248
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	98 32       	cpi	r25, 0x28	; 40
 458:	09 f4       	brne	.+2      	; 0x45c <i2c_write+0x22>
 45a:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 45c:	08 95       	ret

0000045e <uart_putchar>:
		stdout = &uart_output;	//redirect standard output to uart
		stdin  = &uart_input;  //redirect standard input to uart
}
	

void uart_putchar(char c, FILE *stream) {
 45e:	cf 93       	push	r28
 460:	c8 2f       	mov	r28, r24
	if (c == '\n') {
 462:	8a 30       	cpi	r24, 0x0A	; 10
 464:	19 f4       	brne	.+6      	; 0x46c <uart_putchar+0xe>
		uart_putchar('\r', stream);
 466:	8d e0       	ldi	r24, 0x0D	; 13
 468:	0e 94 2f 02 	call	0x45e	; 0x45e <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
 46c:	e0 ec       	ldi	r30, 0xC0	; 192
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	85 ff       	sbrs	r24, 5
 474:	fd cf       	rjmp	.-6      	; 0x470 <uart_putchar+0x12>
	UDR0 = c;
 476:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 47a:	cf 91       	pop	r28
 47c:	08 95       	ret

0000047e <uart_getchar>:

char uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0);
 47e:	e0 ec       	ldi	r30, 0xC0	; 192
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	88 23       	and	r24, r24
 486:	ec f7       	brge	.-6      	; 0x482 <uart_getchar+0x4>
	return UDR0;
 488:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 48c:	08 95       	ret

0000048e <uart_init>:
FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);


void uart_init(void) {
	
	UBRR0H = UBRRH_VALUE;
 48e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = UBRRL_VALUE;
 492:	87 e6       	ldi	r24, 0x67	; 103
 494:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	
	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
 498:	e0 ec       	ldi	r30, 0xC0	; 192
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	8d 7f       	andi	r24, 0xFD	; 253
 4a0:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
 4a2:	86 e0       	ldi	r24, 0x06	; 6
 4a4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
 4a8:	88 e1       	ldi	r24, 0x18	; 24
 4aa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 4ae:	08 95       	ret

000004b0 <io_redirect>:
}

void io_redirect(void ){
		
		
		stdout = &uart_output;	//redirect standard output to uart
 4b0:	eb e2       	ldi	r30, 0x2B	; 43
 4b2:	f1 e0       	ldi	r31, 0x01	; 1
 4b4:	8e e0       	ldi	r24, 0x0E	; 14
 4b6:	91 e0       	ldi	r25, 0x01	; 1
 4b8:	93 83       	std	Z+3, r25	; 0x03
 4ba:	82 83       	std	Z+2, r24	; 0x02
		stdin  = &uart_input;  //redirect standard input to uart
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	91 e0       	ldi	r25, 0x01	; 1
 4c0:	91 83       	std	Z+1, r25	; 0x01
 4c2:	80 83       	st	Z, r24
 4c4:	08 95       	ret

000004c6 <__tablejump2__>:
 4c6:	ee 0f       	add	r30, r30
 4c8:	ff 1f       	adc	r31, r31
 4ca:	05 90       	lpm	r0, Z+
 4cc:	f4 91       	lpm	r31, Z
 4ce:	e0 2d       	mov	r30, r0
 4d0:	09 94       	ijmp

000004d2 <printf>:
 4d2:	a0 e0       	ldi	r26, 0x00	; 0
 4d4:	b0 e0       	ldi	r27, 0x00	; 0
 4d6:	ef e6       	ldi	r30, 0x6F	; 111
 4d8:	f2 e0       	ldi	r31, 0x02	; 2
 4da:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__prologue_saves__+0x20>
 4de:	ae 01       	movw	r20, r28
 4e0:	4b 5f       	subi	r20, 0xFB	; 251
 4e2:	5f 4f       	sbci	r21, 0xFF	; 255
 4e4:	fa 01       	movw	r30, r20
 4e6:	61 91       	ld	r22, Z+
 4e8:	71 91       	ld	r23, Z+
 4ea:	af 01       	movw	r20, r30
 4ec:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <__iob+0x2>
 4f0:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <__iob+0x3>
 4f4:	0e 94 7f 02 	call	0x4fe	; 0x4fe <vfprintf>
 4f8:	e2 e0       	ldi	r30, 0x02	; 2
 4fa:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__epilogue_restores__+0x20>

000004fe <vfprintf>:
 4fe:	ab e0       	ldi	r26, 0x0B	; 11
 500:	b0 e0       	ldi	r27, 0x00	; 0
 502:	e5 e8       	ldi	r30, 0x85	; 133
 504:	f2 e0       	ldi	r31, 0x02	; 2
 506:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__prologue_saves__>
 50a:	6c 01       	movw	r12, r24
 50c:	7b 01       	movw	r14, r22
 50e:	8a 01       	movw	r16, r20
 510:	fc 01       	movw	r30, r24
 512:	17 82       	std	Z+7, r1	; 0x07
 514:	16 82       	std	Z+6, r1	; 0x06
 516:	83 81       	ldd	r24, Z+3	; 0x03
 518:	81 ff       	sbrs	r24, 1
 51a:	cc c1       	rjmp	.+920    	; 0x8b4 <vfprintf+0x3b6>
 51c:	ce 01       	movw	r24, r28
 51e:	01 96       	adiw	r24, 0x01	; 1
 520:	3c 01       	movw	r6, r24
 522:	f6 01       	movw	r30, r12
 524:	93 81       	ldd	r25, Z+3	; 0x03
 526:	f7 01       	movw	r30, r14
 528:	93 fd       	sbrc	r25, 3
 52a:	85 91       	lpm	r24, Z+
 52c:	93 ff       	sbrs	r25, 3
 52e:	81 91       	ld	r24, Z+
 530:	7f 01       	movw	r14, r30
 532:	88 23       	and	r24, r24
 534:	09 f4       	brne	.+2      	; 0x538 <vfprintf+0x3a>
 536:	ba c1       	rjmp	.+884    	; 0x8ac <vfprintf+0x3ae>
 538:	85 32       	cpi	r24, 0x25	; 37
 53a:	39 f4       	brne	.+14     	; 0x54a <vfprintf+0x4c>
 53c:	93 fd       	sbrc	r25, 3
 53e:	85 91       	lpm	r24, Z+
 540:	93 ff       	sbrs	r25, 3
 542:	81 91       	ld	r24, Z+
 544:	7f 01       	movw	r14, r30
 546:	85 32       	cpi	r24, 0x25	; 37
 548:	29 f4       	brne	.+10     	; 0x554 <vfprintf+0x56>
 54a:	b6 01       	movw	r22, r12
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 76 04 	call	0x8ec	; 0x8ec <fputc>
 552:	e7 cf       	rjmp	.-50     	; 0x522 <vfprintf+0x24>
 554:	91 2c       	mov	r9, r1
 556:	21 2c       	mov	r2, r1
 558:	31 2c       	mov	r3, r1
 55a:	ff e1       	ldi	r31, 0x1F	; 31
 55c:	f3 15       	cp	r31, r3
 55e:	d8 f0       	brcs	.+54     	; 0x596 <vfprintf+0x98>
 560:	8b 32       	cpi	r24, 0x2B	; 43
 562:	79 f0       	breq	.+30     	; 0x582 <vfprintf+0x84>
 564:	38 f4       	brcc	.+14     	; 0x574 <vfprintf+0x76>
 566:	80 32       	cpi	r24, 0x20	; 32
 568:	79 f0       	breq	.+30     	; 0x588 <vfprintf+0x8a>
 56a:	83 32       	cpi	r24, 0x23	; 35
 56c:	a1 f4       	brne	.+40     	; 0x596 <vfprintf+0x98>
 56e:	23 2d       	mov	r18, r3
 570:	20 61       	ori	r18, 0x10	; 16
 572:	1d c0       	rjmp	.+58     	; 0x5ae <vfprintf+0xb0>
 574:	8d 32       	cpi	r24, 0x2D	; 45
 576:	61 f0       	breq	.+24     	; 0x590 <vfprintf+0x92>
 578:	80 33       	cpi	r24, 0x30	; 48
 57a:	69 f4       	brne	.+26     	; 0x596 <vfprintf+0x98>
 57c:	23 2d       	mov	r18, r3
 57e:	21 60       	ori	r18, 0x01	; 1
 580:	16 c0       	rjmp	.+44     	; 0x5ae <vfprintf+0xb0>
 582:	83 2d       	mov	r24, r3
 584:	82 60       	ori	r24, 0x02	; 2
 586:	38 2e       	mov	r3, r24
 588:	e3 2d       	mov	r30, r3
 58a:	e4 60       	ori	r30, 0x04	; 4
 58c:	3e 2e       	mov	r3, r30
 58e:	2a c0       	rjmp	.+84     	; 0x5e4 <vfprintf+0xe6>
 590:	f3 2d       	mov	r31, r3
 592:	f8 60       	ori	r31, 0x08	; 8
 594:	1d c0       	rjmp	.+58     	; 0x5d0 <vfprintf+0xd2>
 596:	37 fc       	sbrc	r3, 7
 598:	2d c0       	rjmp	.+90     	; 0x5f4 <vfprintf+0xf6>
 59a:	20 ed       	ldi	r18, 0xD0	; 208
 59c:	28 0f       	add	r18, r24
 59e:	2a 30       	cpi	r18, 0x0A	; 10
 5a0:	40 f0       	brcs	.+16     	; 0x5b2 <vfprintf+0xb4>
 5a2:	8e 32       	cpi	r24, 0x2E	; 46
 5a4:	b9 f4       	brne	.+46     	; 0x5d4 <vfprintf+0xd6>
 5a6:	36 fc       	sbrc	r3, 6
 5a8:	81 c1       	rjmp	.+770    	; 0x8ac <vfprintf+0x3ae>
 5aa:	23 2d       	mov	r18, r3
 5ac:	20 64       	ori	r18, 0x40	; 64
 5ae:	32 2e       	mov	r3, r18
 5b0:	19 c0       	rjmp	.+50     	; 0x5e4 <vfprintf+0xe6>
 5b2:	36 fe       	sbrs	r3, 6
 5b4:	06 c0       	rjmp	.+12     	; 0x5c2 <vfprintf+0xc4>
 5b6:	8a e0       	ldi	r24, 0x0A	; 10
 5b8:	98 9e       	mul	r9, r24
 5ba:	20 0d       	add	r18, r0
 5bc:	11 24       	eor	r1, r1
 5be:	92 2e       	mov	r9, r18
 5c0:	11 c0       	rjmp	.+34     	; 0x5e4 <vfprintf+0xe6>
 5c2:	ea e0       	ldi	r30, 0x0A	; 10
 5c4:	2e 9e       	mul	r2, r30
 5c6:	20 0d       	add	r18, r0
 5c8:	11 24       	eor	r1, r1
 5ca:	22 2e       	mov	r2, r18
 5cc:	f3 2d       	mov	r31, r3
 5ce:	f0 62       	ori	r31, 0x20	; 32
 5d0:	3f 2e       	mov	r3, r31
 5d2:	08 c0       	rjmp	.+16     	; 0x5e4 <vfprintf+0xe6>
 5d4:	8c 36       	cpi	r24, 0x6C	; 108
 5d6:	21 f4       	brne	.+8      	; 0x5e0 <vfprintf+0xe2>
 5d8:	83 2d       	mov	r24, r3
 5da:	80 68       	ori	r24, 0x80	; 128
 5dc:	38 2e       	mov	r3, r24
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <vfprintf+0xe6>
 5e0:	88 36       	cpi	r24, 0x68	; 104
 5e2:	41 f4       	brne	.+16     	; 0x5f4 <vfprintf+0xf6>
 5e4:	f7 01       	movw	r30, r14
 5e6:	93 fd       	sbrc	r25, 3
 5e8:	85 91       	lpm	r24, Z+
 5ea:	93 ff       	sbrs	r25, 3
 5ec:	81 91       	ld	r24, Z+
 5ee:	7f 01       	movw	r14, r30
 5f0:	81 11       	cpse	r24, r1
 5f2:	b3 cf       	rjmp	.-154    	; 0x55a <vfprintf+0x5c>
 5f4:	98 2f       	mov	r25, r24
 5f6:	9f 7d       	andi	r25, 0xDF	; 223
 5f8:	95 54       	subi	r25, 0x45	; 69
 5fa:	93 30       	cpi	r25, 0x03	; 3
 5fc:	28 f4       	brcc	.+10     	; 0x608 <vfprintf+0x10a>
 5fe:	0c 5f       	subi	r16, 0xFC	; 252
 600:	1f 4f       	sbci	r17, 0xFF	; 255
 602:	9f e3       	ldi	r25, 0x3F	; 63
 604:	99 83       	std	Y+1, r25	; 0x01
 606:	0d c0       	rjmp	.+26     	; 0x622 <vfprintf+0x124>
 608:	83 36       	cpi	r24, 0x63	; 99
 60a:	31 f0       	breq	.+12     	; 0x618 <vfprintf+0x11a>
 60c:	83 37       	cpi	r24, 0x73	; 115
 60e:	71 f0       	breq	.+28     	; 0x62c <vfprintf+0x12e>
 610:	83 35       	cpi	r24, 0x53	; 83
 612:	09 f0       	breq	.+2      	; 0x616 <vfprintf+0x118>
 614:	59 c0       	rjmp	.+178    	; 0x6c8 <vfprintf+0x1ca>
 616:	21 c0       	rjmp	.+66     	; 0x65a <vfprintf+0x15c>
 618:	f8 01       	movw	r30, r16
 61a:	80 81       	ld	r24, Z
 61c:	89 83       	std	Y+1, r24	; 0x01
 61e:	0e 5f       	subi	r16, 0xFE	; 254
 620:	1f 4f       	sbci	r17, 0xFF	; 255
 622:	88 24       	eor	r8, r8
 624:	83 94       	inc	r8
 626:	91 2c       	mov	r9, r1
 628:	53 01       	movw	r10, r6
 62a:	13 c0       	rjmp	.+38     	; 0x652 <vfprintf+0x154>
 62c:	28 01       	movw	r4, r16
 62e:	f2 e0       	ldi	r31, 0x02	; 2
 630:	4f 0e       	add	r4, r31
 632:	51 1c       	adc	r5, r1
 634:	f8 01       	movw	r30, r16
 636:	a0 80       	ld	r10, Z
 638:	b1 80       	ldd	r11, Z+1	; 0x01
 63a:	36 fe       	sbrs	r3, 6
 63c:	03 c0       	rjmp	.+6      	; 0x644 <vfprintf+0x146>
 63e:	69 2d       	mov	r22, r9
 640:	70 e0       	ldi	r23, 0x00	; 0
 642:	02 c0       	rjmp	.+4      	; 0x648 <vfprintf+0x14a>
 644:	6f ef       	ldi	r22, 0xFF	; 255
 646:	7f ef       	ldi	r23, 0xFF	; 255
 648:	c5 01       	movw	r24, r10
 64a:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <strnlen>
 64e:	4c 01       	movw	r8, r24
 650:	82 01       	movw	r16, r4
 652:	f3 2d       	mov	r31, r3
 654:	ff 77       	andi	r31, 0x7F	; 127
 656:	3f 2e       	mov	r3, r31
 658:	16 c0       	rjmp	.+44     	; 0x686 <vfprintf+0x188>
 65a:	28 01       	movw	r4, r16
 65c:	22 e0       	ldi	r18, 0x02	; 2
 65e:	42 0e       	add	r4, r18
 660:	51 1c       	adc	r5, r1
 662:	f8 01       	movw	r30, r16
 664:	a0 80       	ld	r10, Z
 666:	b1 80       	ldd	r11, Z+1	; 0x01
 668:	36 fe       	sbrs	r3, 6
 66a:	03 c0       	rjmp	.+6      	; 0x672 <vfprintf+0x174>
 66c:	69 2d       	mov	r22, r9
 66e:	70 e0       	ldi	r23, 0x00	; 0
 670:	02 c0       	rjmp	.+4      	; 0x676 <vfprintf+0x178>
 672:	6f ef       	ldi	r22, 0xFF	; 255
 674:	7f ef       	ldi	r23, 0xFF	; 255
 676:	c5 01       	movw	r24, r10
 678:	0e 94 60 04 	call	0x8c0	; 0x8c0 <strnlen_P>
 67c:	4c 01       	movw	r8, r24
 67e:	f3 2d       	mov	r31, r3
 680:	f0 68       	ori	r31, 0x80	; 128
 682:	3f 2e       	mov	r3, r31
 684:	82 01       	movw	r16, r4
 686:	33 fc       	sbrc	r3, 3
 688:	1b c0       	rjmp	.+54     	; 0x6c0 <vfprintf+0x1c2>
 68a:	82 2d       	mov	r24, r2
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	88 16       	cp	r8, r24
 690:	99 06       	cpc	r9, r25
 692:	b0 f4       	brcc	.+44     	; 0x6c0 <vfprintf+0x1c2>
 694:	b6 01       	movw	r22, r12
 696:	80 e2       	ldi	r24, 0x20	; 32
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	0e 94 76 04 	call	0x8ec	; 0x8ec <fputc>
 69e:	2a 94       	dec	r2
 6a0:	f4 cf       	rjmp	.-24     	; 0x68a <vfprintf+0x18c>
 6a2:	f5 01       	movw	r30, r10
 6a4:	37 fc       	sbrc	r3, 7
 6a6:	85 91       	lpm	r24, Z+
 6a8:	37 fe       	sbrs	r3, 7
 6aa:	81 91       	ld	r24, Z+
 6ac:	5f 01       	movw	r10, r30
 6ae:	b6 01       	movw	r22, r12
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	0e 94 76 04 	call	0x8ec	; 0x8ec <fputc>
 6b6:	21 10       	cpse	r2, r1
 6b8:	2a 94       	dec	r2
 6ba:	21 e0       	ldi	r18, 0x01	; 1
 6bc:	82 1a       	sub	r8, r18
 6be:	91 08       	sbc	r9, r1
 6c0:	81 14       	cp	r8, r1
 6c2:	91 04       	cpc	r9, r1
 6c4:	71 f7       	brne	.-36     	; 0x6a2 <vfprintf+0x1a4>
 6c6:	e8 c0       	rjmp	.+464    	; 0x898 <vfprintf+0x39a>
 6c8:	84 36       	cpi	r24, 0x64	; 100
 6ca:	11 f0       	breq	.+4      	; 0x6d0 <vfprintf+0x1d2>
 6cc:	89 36       	cpi	r24, 0x69	; 105
 6ce:	41 f5       	brne	.+80     	; 0x720 <vfprintf+0x222>
 6d0:	f8 01       	movw	r30, r16
 6d2:	37 fe       	sbrs	r3, 7
 6d4:	07 c0       	rjmp	.+14     	; 0x6e4 <vfprintf+0x1e6>
 6d6:	60 81       	ld	r22, Z
 6d8:	71 81       	ldd	r23, Z+1	; 0x01
 6da:	82 81       	ldd	r24, Z+2	; 0x02
 6dc:	93 81       	ldd	r25, Z+3	; 0x03
 6de:	0c 5f       	subi	r16, 0xFC	; 252
 6e0:	1f 4f       	sbci	r17, 0xFF	; 255
 6e2:	08 c0       	rjmp	.+16     	; 0x6f4 <vfprintf+0x1f6>
 6e4:	60 81       	ld	r22, Z
 6e6:	71 81       	ldd	r23, Z+1	; 0x01
 6e8:	07 2e       	mov	r0, r23
 6ea:	00 0c       	add	r0, r0
 6ec:	88 0b       	sbc	r24, r24
 6ee:	99 0b       	sbc	r25, r25
 6f0:	0e 5f       	subi	r16, 0xFE	; 254
 6f2:	1f 4f       	sbci	r17, 0xFF	; 255
 6f4:	f3 2d       	mov	r31, r3
 6f6:	ff 76       	andi	r31, 0x6F	; 111
 6f8:	3f 2e       	mov	r3, r31
 6fa:	97 ff       	sbrs	r25, 7
 6fc:	09 c0       	rjmp	.+18     	; 0x710 <vfprintf+0x212>
 6fe:	90 95       	com	r25
 700:	80 95       	com	r24
 702:	70 95       	com	r23
 704:	61 95       	neg	r22
 706:	7f 4f       	sbci	r23, 0xFF	; 255
 708:	8f 4f       	sbci	r24, 0xFF	; 255
 70a:	9f 4f       	sbci	r25, 0xFF	; 255
 70c:	f0 68       	ori	r31, 0x80	; 128
 70e:	3f 2e       	mov	r3, r31
 710:	2a e0       	ldi	r18, 0x0A	; 10
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	a3 01       	movw	r20, r6
 716:	0e 94 b2 04 	call	0x964	; 0x964 <__ultoa_invert>
 71a:	88 2e       	mov	r8, r24
 71c:	86 18       	sub	r8, r6
 71e:	45 c0       	rjmp	.+138    	; 0x7aa <vfprintf+0x2ac>
 720:	85 37       	cpi	r24, 0x75	; 117
 722:	31 f4       	brne	.+12     	; 0x730 <vfprintf+0x232>
 724:	23 2d       	mov	r18, r3
 726:	2f 7e       	andi	r18, 0xEF	; 239
 728:	b2 2e       	mov	r11, r18
 72a:	2a e0       	ldi	r18, 0x0A	; 10
 72c:	30 e0       	ldi	r19, 0x00	; 0
 72e:	25 c0       	rjmp	.+74     	; 0x77a <vfprintf+0x27c>
 730:	93 2d       	mov	r25, r3
 732:	99 7f       	andi	r25, 0xF9	; 249
 734:	b9 2e       	mov	r11, r25
 736:	8f 36       	cpi	r24, 0x6F	; 111
 738:	c1 f0       	breq	.+48     	; 0x76a <vfprintf+0x26c>
 73a:	18 f4       	brcc	.+6      	; 0x742 <vfprintf+0x244>
 73c:	88 35       	cpi	r24, 0x58	; 88
 73e:	79 f0       	breq	.+30     	; 0x75e <vfprintf+0x260>
 740:	b5 c0       	rjmp	.+362    	; 0x8ac <vfprintf+0x3ae>
 742:	80 37       	cpi	r24, 0x70	; 112
 744:	19 f0       	breq	.+6      	; 0x74c <vfprintf+0x24e>
 746:	88 37       	cpi	r24, 0x78	; 120
 748:	21 f0       	breq	.+8      	; 0x752 <vfprintf+0x254>
 74a:	b0 c0       	rjmp	.+352    	; 0x8ac <vfprintf+0x3ae>
 74c:	e9 2f       	mov	r30, r25
 74e:	e0 61       	ori	r30, 0x10	; 16
 750:	be 2e       	mov	r11, r30
 752:	b4 fe       	sbrs	r11, 4
 754:	0d c0       	rjmp	.+26     	; 0x770 <vfprintf+0x272>
 756:	fb 2d       	mov	r31, r11
 758:	f4 60       	ori	r31, 0x04	; 4
 75a:	bf 2e       	mov	r11, r31
 75c:	09 c0       	rjmp	.+18     	; 0x770 <vfprintf+0x272>
 75e:	34 fe       	sbrs	r3, 4
 760:	0a c0       	rjmp	.+20     	; 0x776 <vfprintf+0x278>
 762:	29 2f       	mov	r18, r25
 764:	26 60       	ori	r18, 0x06	; 6
 766:	b2 2e       	mov	r11, r18
 768:	06 c0       	rjmp	.+12     	; 0x776 <vfprintf+0x278>
 76a:	28 e0       	ldi	r18, 0x08	; 8
 76c:	30 e0       	ldi	r19, 0x00	; 0
 76e:	05 c0       	rjmp	.+10     	; 0x77a <vfprintf+0x27c>
 770:	20 e1       	ldi	r18, 0x10	; 16
 772:	30 e0       	ldi	r19, 0x00	; 0
 774:	02 c0       	rjmp	.+4      	; 0x77a <vfprintf+0x27c>
 776:	20 e1       	ldi	r18, 0x10	; 16
 778:	32 e0       	ldi	r19, 0x02	; 2
 77a:	f8 01       	movw	r30, r16
 77c:	b7 fe       	sbrs	r11, 7
 77e:	07 c0       	rjmp	.+14     	; 0x78e <vfprintf+0x290>
 780:	60 81       	ld	r22, Z
 782:	71 81       	ldd	r23, Z+1	; 0x01
 784:	82 81       	ldd	r24, Z+2	; 0x02
 786:	93 81       	ldd	r25, Z+3	; 0x03
 788:	0c 5f       	subi	r16, 0xFC	; 252
 78a:	1f 4f       	sbci	r17, 0xFF	; 255
 78c:	06 c0       	rjmp	.+12     	; 0x79a <vfprintf+0x29c>
 78e:	60 81       	ld	r22, Z
 790:	71 81       	ldd	r23, Z+1	; 0x01
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	0e 5f       	subi	r16, 0xFE	; 254
 798:	1f 4f       	sbci	r17, 0xFF	; 255
 79a:	a3 01       	movw	r20, r6
 79c:	0e 94 b2 04 	call	0x964	; 0x964 <__ultoa_invert>
 7a0:	88 2e       	mov	r8, r24
 7a2:	86 18       	sub	r8, r6
 7a4:	fb 2d       	mov	r31, r11
 7a6:	ff 77       	andi	r31, 0x7F	; 127
 7a8:	3f 2e       	mov	r3, r31
 7aa:	36 fe       	sbrs	r3, 6
 7ac:	0d c0       	rjmp	.+26     	; 0x7c8 <vfprintf+0x2ca>
 7ae:	23 2d       	mov	r18, r3
 7b0:	2e 7f       	andi	r18, 0xFE	; 254
 7b2:	a2 2e       	mov	r10, r18
 7b4:	89 14       	cp	r8, r9
 7b6:	58 f4       	brcc	.+22     	; 0x7ce <vfprintf+0x2d0>
 7b8:	34 fe       	sbrs	r3, 4
 7ba:	0b c0       	rjmp	.+22     	; 0x7d2 <vfprintf+0x2d4>
 7bc:	32 fc       	sbrc	r3, 2
 7be:	09 c0       	rjmp	.+18     	; 0x7d2 <vfprintf+0x2d4>
 7c0:	83 2d       	mov	r24, r3
 7c2:	8e 7e       	andi	r24, 0xEE	; 238
 7c4:	a8 2e       	mov	r10, r24
 7c6:	05 c0       	rjmp	.+10     	; 0x7d2 <vfprintf+0x2d4>
 7c8:	b8 2c       	mov	r11, r8
 7ca:	a3 2c       	mov	r10, r3
 7cc:	03 c0       	rjmp	.+6      	; 0x7d4 <vfprintf+0x2d6>
 7ce:	b8 2c       	mov	r11, r8
 7d0:	01 c0       	rjmp	.+2      	; 0x7d4 <vfprintf+0x2d6>
 7d2:	b9 2c       	mov	r11, r9
 7d4:	a4 fe       	sbrs	r10, 4
 7d6:	0f c0       	rjmp	.+30     	; 0x7f6 <vfprintf+0x2f8>
 7d8:	fe 01       	movw	r30, r28
 7da:	e8 0d       	add	r30, r8
 7dc:	f1 1d       	adc	r31, r1
 7de:	80 81       	ld	r24, Z
 7e0:	80 33       	cpi	r24, 0x30	; 48
 7e2:	21 f4       	brne	.+8      	; 0x7ec <vfprintf+0x2ee>
 7e4:	9a 2d       	mov	r25, r10
 7e6:	99 7e       	andi	r25, 0xE9	; 233
 7e8:	a9 2e       	mov	r10, r25
 7ea:	09 c0       	rjmp	.+18     	; 0x7fe <vfprintf+0x300>
 7ec:	a2 fe       	sbrs	r10, 2
 7ee:	06 c0       	rjmp	.+12     	; 0x7fc <vfprintf+0x2fe>
 7f0:	b3 94       	inc	r11
 7f2:	b3 94       	inc	r11
 7f4:	04 c0       	rjmp	.+8      	; 0x7fe <vfprintf+0x300>
 7f6:	8a 2d       	mov	r24, r10
 7f8:	86 78       	andi	r24, 0x86	; 134
 7fa:	09 f0       	breq	.+2      	; 0x7fe <vfprintf+0x300>
 7fc:	b3 94       	inc	r11
 7fe:	a3 fc       	sbrc	r10, 3
 800:	11 c0       	rjmp	.+34     	; 0x824 <vfprintf+0x326>
 802:	a0 fe       	sbrs	r10, 0
 804:	06 c0       	rjmp	.+12     	; 0x812 <vfprintf+0x314>
 806:	b2 14       	cp	r11, r2
 808:	88 f4       	brcc	.+34     	; 0x82c <vfprintf+0x32e>
 80a:	28 0c       	add	r2, r8
 80c:	92 2c       	mov	r9, r2
 80e:	9b 18       	sub	r9, r11
 810:	0e c0       	rjmp	.+28     	; 0x82e <vfprintf+0x330>
 812:	b2 14       	cp	r11, r2
 814:	60 f4       	brcc	.+24     	; 0x82e <vfprintf+0x330>
 816:	b6 01       	movw	r22, r12
 818:	80 e2       	ldi	r24, 0x20	; 32
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	0e 94 76 04 	call	0x8ec	; 0x8ec <fputc>
 820:	b3 94       	inc	r11
 822:	f7 cf       	rjmp	.-18     	; 0x812 <vfprintf+0x314>
 824:	b2 14       	cp	r11, r2
 826:	18 f4       	brcc	.+6      	; 0x82e <vfprintf+0x330>
 828:	2b 18       	sub	r2, r11
 82a:	02 c0       	rjmp	.+4      	; 0x830 <vfprintf+0x332>
 82c:	98 2c       	mov	r9, r8
 82e:	21 2c       	mov	r2, r1
 830:	a4 fe       	sbrs	r10, 4
 832:	10 c0       	rjmp	.+32     	; 0x854 <vfprintf+0x356>
 834:	b6 01       	movw	r22, r12
 836:	80 e3       	ldi	r24, 0x30	; 48
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	0e 94 76 04 	call	0x8ec	; 0x8ec <fputc>
 83e:	a2 fe       	sbrs	r10, 2
 840:	17 c0       	rjmp	.+46     	; 0x870 <vfprintf+0x372>
 842:	a1 fc       	sbrc	r10, 1
 844:	03 c0       	rjmp	.+6      	; 0x84c <vfprintf+0x34e>
 846:	88 e7       	ldi	r24, 0x78	; 120
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	02 c0       	rjmp	.+4      	; 0x850 <vfprintf+0x352>
 84c:	88 e5       	ldi	r24, 0x58	; 88
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	b6 01       	movw	r22, r12
 852:	0c c0       	rjmp	.+24     	; 0x86c <vfprintf+0x36e>
 854:	8a 2d       	mov	r24, r10
 856:	86 78       	andi	r24, 0x86	; 134
 858:	59 f0       	breq	.+22     	; 0x870 <vfprintf+0x372>
 85a:	a1 fe       	sbrs	r10, 1
 85c:	02 c0       	rjmp	.+4      	; 0x862 <vfprintf+0x364>
 85e:	8b e2       	ldi	r24, 0x2B	; 43
 860:	01 c0       	rjmp	.+2      	; 0x864 <vfprintf+0x366>
 862:	80 e2       	ldi	r24, 0x20	; 32
 864:	a7 fc       	sbrc	r10, 7
 866:	8d e2       	ldi	r24, 0x2D	; 45
 868:	b6 01       	movw	r22, r12
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	0e 94 76 04 	call	0x8ec	; 0x8ec <fputc>
 870:	89 14       	cp	r8, r9
 872:	38 f4       	brcc	.+14     	; 0x882 <vfprintf+0x384>
 874:	b6 01       	movw	r22, r12
 876:	80 e3       	ldi	r24, 0x30	; 48
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	0e 94 76 04 	call	0x8ec	; 0x8ec <fputc>
 87e:	9a 94       	dec	r9
 880:	f7 cf       	rjmp	.-18     	; 0x870 <vfprintf+0x372>
 882:	8a 94       	dec	r8
 884:	f3 01       	movw	r30, r6
 886:	e8 0d       	add	r30, r8
 888:	f1 1d       	adc	r31, r1
 88a:	80 81       	ld	r24, Z
 88c:	b6 01       	movw	r22, r12
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	0e 94 76 04 	call	0x8ec	; 0x8ec <fputc>
 894:	81 10       	cpse	r8, r1
 896:	f5 cf       	rjmp	.-22     	; 0x882 <vfprintf+0x384>
 898:	22 20       	and	r2, r2
 89a:	09 f4       	brne	.+2      	; 0x89e <vfprintf+0x3a0>
 89c:	42 ce       	rjmp	.-892    	; 0x522 <vfprintf+0x24>
 89e:	b6 01       	movw	r22, r12
 8a0:	80 e2       	ldi	r24, 0x20	; 32
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	0e 94 76 04 	call	0x8ec	; 0x8ec <fputc>
 8a8:	2a 94       	dec	r2
 8aa:	f6 cf       	rjmp	.-20     	; 0x898 <vfprintf+0x39a>
 8ac:	f6 01       	movw	r30, r12
 8ae:	86 81       	ldd	r24, Z+6	; 0x06
 8b0:	97 81       	ldd	r25, Z+7	; 0x07
 8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <vfprintf+0x3ba>
 8b4:	8f ef       	ldi	r24, 0xFF	; 255
 8b6:	9f ef       	ldi	r25, 0xFF	; 255
 8b8:	2b 96       	adiw	r28, 0x0b	; 11
 8ba:	e2 e1       	ldi	r30, 0x12	; 18
 8bc:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <__epilogue_restores__>

000008c0 <strnlen_P>:
 8c0:	fc 01       	movw	r30, r24
 8c2:	05 90       	lpm	r0, Z+
 8c4:	61 50       	subi	r22, 0x01	; 1
 8c6:	70 40       	sbci	r23, 0x00	; 0
 8c8:	01 10       	cpse	r0, r1
 8ca:	d8 f7       	brcc	.-10     	; 0x8c2 <strnlen_P+0x2>
 8cc:	80 95       	com	r24
 8ce:	90 95       	com	r25
 8d0:	8e 0f       	add	r24, r30
 8d2:	9f 1f       	adc	r25, r31
 8d4:	08 95       	ret

000008d6 <strnlen>:
 8d6:	fc 01       	movw	r30, r24
 8d8:	61 50       	subi	r22, 0x01	; 1
 8da:	70 40       	sbci	r23, 0x00	; 0
 8dc:	01 90       	ld	r0, Z+
 8de:	01 10       	cpse	r0, r1
 8e0:	d8 f7       	brcc	.-10     	; 0x8d8 <strnlen+0x2>
 8e2:	80 95       	com	r24
 8e4:	90 95       	com	r25
 8e6:	8e 0f       	add	r24, r30
 8e8:	9f 1f       	adc	r25, r31
 8ea:	08 95       	ret

000008ec <fputc>:
 8ec:	0f 93       	push	r16
 8ee:	1f 93       	push	r17
 8f0:	cf 93       	push	r28
 8f2:	df 93       	push	r29
 8f4:	fb 01       	movw	r30, r22
 8f6:	23 81       	ldd	r18, Z+3	; 0x03
 8f8:	21 fd       	sbrc	r18, 1
 8fa:	03 c0       	rjmp	.+6      	; 0x902 <__stack+0x3>
 8fc:	8f ef       	ldi	r24, 0xFF	; 255
 8fe:	9f ef       	ldi	r25, 0xFF	; 255
 900:	2c c0       	rjmp	.+88     	; 0x95a <__stack+0x5b>
 902:	22 ff       	sbrs	r18, 2
 904:	16 c0       	rjmp	.+44     	; 0x932 <__stack+0x33>
 906:	46 81       	ldd	r20, Z+6	; 0x06
 908:	57 81       	ldd	r21, Z+7	; 0x07
 90a:	24 81       	ldd	r18, Z+4	; 0x04
 90c:	35 81       	ldd	r19, Z+5	; 0x05
 90e:	42 17       	cp	r20, r18
 910:	53 07       	cpc	r21, r19
 912:	44 f4       	brge	.+16     	; 0x924 <__stack+0x25>
 914:	a0 81       	ld	r26, Z
 916:	b1 81       	ldd	r27, Z+1	; 0x01
 918:	9d 01       	movw	r18, r26
 91a:	2f 5f       	subi	r18, 0xFF	; 255
 91c:	3f 4f       	sbci	r19, 0xFF	; 255
 91e:	31 83       	std	Z+1, r19	; 0x01
 920:	20 83       	st	Z, r18
 922:	8c 93       	st	X, r24
 924:	26 81       	ldd	r18, Z+6	; 0x06
 926:	37 81       	ldd	r19, Z+7	; 0x07
 928:	2f 5f       	subi	r18, 0xFF	; 255
 92a:	3f 4f       	sbci	r19, 0xFF	; 255
 92c:	37 83       	std	Z+7, r19	; 0x07
 92e:	26 83       	std	Z+6, r18	; 0x06
 930:	14 c0       	rjmp	.+40     	; 0x95a <__stack+0x5b>
 932:	8b 01       	movw	r16, r22
 934:	ec 01       	movw	r28, r24
 936:	fb 01       	movw	r30, r22
 938:	00 84       	ldd	r0, Z+8	; 0x08
 93a:	f1 85       	ldd	r31, Z+9	; 0x09
 93c:	e0 2d       	mov	r30, r0
 93e:	09 95       	icall
 940:	89 2b       	or	r24, r25
 942:	e1 f6       	brne	.-72     	; 0x8fc <fputc+0x10>
 944:	d8 01       	movw	r26, r16
 946:	16 96       	adiw	r26, 0x06	; 6
 948:	8d 91       	ld	r24, X+
 94a:	9c 91       	ld	r25, X
 94c:	17 97       	sbiw	r26, 0x07	; 7
 94e:	01 96       	adiw	r24, 0x01	; 1
 950:	17 96       	adiw	r26, 0x07	; 7
 952:	9c 93       	st	X, r25
 954:	8e 93       	st	-X, r24
 956:	16 97       	sbiw	r26, 0x06	; 6
 958:	ce 01       	movw	r24, r28
 95a:	df 91       	pop	r29
 95c:	cf 91       	pop	r28
 95e:	1f 91       	pop	r17
 960:	0f 91       	pop	r16
 962:	08 95       	ret

00000964 <__ultoa_invert>:
 964:	fa 01       	movw	r30, r20
 966:	aa 27       	eor	r26, r26
 968:	28 30       	cpi	r18, 0x08	; 8
 96a:	51 f1       	breq	.+84     	; 0x9c0 <__ultoa_invert+0x5c>
 96c:	20 31       	cpi	r18, 0x10	; 16
 96e:	81 f1       	breq	.+96     	; 0x9d0 <__ultoa_invert+0x6c>
 970:	e8 94       	clt
 972:	6f 93       	push	r22
 974:	6e 7f       	andi	r22, 0xFE	; 254
 976:	6e 5f       	subi	r22, 0xFE	; 254
 978:	7f 4f       	sbci	r23, 0xFF	; 255
 97a:	8f 4f       	sbci	r24, 0xFF	; 255
 97c:	9f 4f       	sbci	r25, 0xFF	; 255
 97e:	af 4f       	sbci	r26, 0xFF	; 255
 980:	b1 e0       	ldi	r27, 0x01	; 1
 982:	3e d0       	rcall	.+124    	; 0xa00 <__ultoa_invert+0x9c>
 984:	b4 e0       	ldi	r27, 0x04	; 4
 986:	3c d0       	rcall	.+120    	; 0xa00 <__ultoa_invert+0x9c>
 988:	67 0f       	add	r22, r23
 98a:	78 1f       	adc	r23, r24
 98c:	89 1f       	adc	r24, r25
 98e:	9a 1f       	adc	r25, r26
 990:	a1 1d       	adc	r26, r1
 992:	68 0f       	add	r22, r24
 994:	79 1f       	adc	r23, r25
 996:	8a 1f       	adc	r24, r26
 998:	91 1d       	adc	r25, r1
 99a:	a1 1d       	adc	r26, r1
 99c:	6a 0f       	add	r22, r26
 99e:	71 1d       	adc	r23, r1
 9a0:	81 1d       	adc	r24, r1
 9a2:	91 1d       	adc	r25, r1
 9a4:	a1 1d       	adc	r26, r1
 9a6:	20 d0       	rcall	.+64     	; 0x9e8 <__ultoa_invert+0x84>
 9a8:	09 f4       	brne	.+2      	; 0x9ac <__ultoa_invert+0x48>
 9aa:	68 94       	set
 9ac:	3f 91       	pop	r19
 9ae:	2a e0       	ldi	r18, 0x0A	; 10
 9b0:	26 9f       	mul	r18, r22
 9b2:	11 24       	eor	r1, r1
 9b4:	30 19       	sub	r19, r0
 9b6:	30 5d       	subi	r19, 0xD0	; 208
 9b8:	31 93       	st	Z+, r19
 9ba:	de f6       	brtc	.-74     	; 0x972 <__ultoa_invert+0xe>
 9bc:	cf 01       	movw	r24, r30
 9be:	08 95       	ret
 9c0:	46 2f       	mov	r20, r22
 9c2:	47 70       	andi	r20, 0x07	; 7
 9c4:	40 5d       	subi	r20, 0xD0	; 208
 9c6:	41 93       	st	Z+, r20
 9c8:	b3 e0       	ldi	r27, 0x03	; 3
 9ca:	0f d0       	rcall	.+30     	; 0x9ea <__ultoa_invert+0x86>
 9cc:	c9 f7       	brne	.-14     	; 0x9c0 <__ultoa_invert+0x5c>
 9ce:	f6 cf       	rjmp	.-20     	; 0x9bc <__ultoa_invert+0x58>
 9d0:	46 2f       	mov	r20, r22
 9d2:	4f 70       	andi	r20, 0x0F	; 15
 9d4:	40 5d       	subi	r20, 0xD0	; 208
 9d6:	4a 33       	cpi	r20, 0x3A	; 58
 9d8:	18 f0       	brcs	.+6      	; 0x9e0 <__ultoa_invert+0x7c>
 9da:	49 5d       	subi	r20, 0xD9	; 217
 9dc:	31 fd       	sbrc	r19, 1
 9de:	40 52       	subi	r20, 0x20	; 32
 9e0:	41 93       	st	Z+, r20
 9e2:	02 d0       	rcall	.+4      	; 0x9e8 <__ultoa_invert+0x84>
 9e4:	a9 f7       	brne	.-22     	; 0x9d0 <__ultoa_invert+0x6c>
 9e6:	ea cf       	rjmp	.-44     	; 0x9bc <__ultoa_invert+0x58>
 9e8:	b4 e0       	ldi	r27, 0x04	; 4
 9ea:	a6 95       	lsr	r26
 9ec:	97 95       	ror	r25
 9ee:	87 95       	ror	r24
 9f0:	77 95       	ror	r23
 9f2:	67 95       	ror	r22
 9f4:	ba 95       	dec	r27
 9f6:	c9 f7       	brne	.-14     	; 0x9ea <__ultoa_invert+0x86>
 9f8:	00 97       	sbiw	r24, 0x00	; 0
 9fa:	61 05       	cpc	r22, r1
 9fc:	71 05       	cpc	r23, r1
 9fe:	08 95       	ret
 a00:	9b 01       	movw	r18, r22
 a02:	ac 01       	movw	r20, r24
 a04:	0a 2e       	mov	r0, r26
 a06:	06 94       	lsr	r0
 a08:	57 95       	ror	r21
 a0a:	47 95       	ror	r20
 a0c:	37 95       	ror	r19
 a0e:	27 95       	ror	r18
 a10:	ba 95       	dec	r27
 a12:	c9 f7       	brne	.-14     	; 0xa06 <__ultoa_invert+0xa2>
 a14:	62 0f       	add	r22, r18
 a16:	73 1f       	adc	r23, r19
 a18:	84 1f       	adc	r24, r20
 a1a:	95 1f       	adc	r25, r21
 a1c:	a0 1d       	adc	r26, r0
 a1e:	08 95       	ret

00000a20 <__prologue_saves__>:
 a20:	2f 92       	push	r2
 a22:	3f 92       	push	r3
 a24:	4f 92       	push	r4
 a26:	5f 92       	push	r5
 a28:	6f 92       	push	r6
 a2a:	7f 92       	push	r7
 a2c:	8f 92       	push	r8
 a2e:	9f 92       	push	r9
 a30:	af 92       	push	r10
 a32:	bf 92       	push	r11
 a34:	cf 92       	push	r12
 a36:	df 92       	push	r13
 a38:	ef 92       	push	r14
 a3a:	ff 92       	push	r15
 a3c:	0f 93       	push	r16
 a3e:	1f 93       	push	r17
 a40:	cf 93       	push	r28
 a42:	df 93       	push	r29
 a44:	cd b7       	in	r28, 0x3d	; 61
 a46:	de b7       	in	r29, 0x3e	; 62
 a48:	ca 1b       	sub	r28, r26
 a4a:	db 0b       	sbc	r29, r27
 a4c:	0f b6       	in	r0, 0x3f	; 63
 a4e:	f8 94       	cli
 a50:	de bf       	out	0x3e, r29	; 62
 a52:	0f be       	out	0x3f, r0	; 63
 a54:	cd bf       	out	0x3d, r28	; 61
 a56:	09 94       	ijmp

00000a58 <__epilogue_restores__>:
 a58:	2a 88       	ldd	r2, Y+18	; 0x12
 a5a:	39 88       	ldd	r3, Y+17	; 0x11
 a5c:	48 88       	ldd	r4, Y+16	; 0x10
 a5e:	5f 84       	ldd	r5, Y+15	; 0x0f
 a60:	6e 84       	ldd	r6, Y+14	; 0x0e
 a62:	7d 84       	ldd	r7, Y+13	; 0x0d
 a64:	8c 84       	ldd	r8, Y+12	; 0x0c
 a66:	9b 84       	ldd	r9, Y+11	; 0x0b
 a68:	aa 84       	ldd	r10, Y+10	; 0x0a
 a6a:	b9 84       	ldd	r11, Y+9	; 0x09
 a6c:	c8 84       	ldd	r12, Y+8	; 0x08
 a6e:	df 80       	ldd	r13, Y+7	; 0x07
 a70:	ee 80       	ldd	r14, Y+6	; 0x06
 a72:	fd 80       	ldd	r15, Y+5	; 0x05
 a74:	0c 81       	ldd	r16, Y+4	; 0x04
 a76:	1b 81       	ldd	r17, Y+3	; 0x03
 a78:	aa 81       	ldd	r26, Y+2	; 0x02
 a7a:	b9 81       	ldd	r27, Y+1	; 0x01
 a7c:	ce 0f       	add	r28, r30
 a7e:	d1 1d       	adc	r29, r1
 a80:	0f b6       	in	r0, 0x3f	; 63
 a82:	f8 94       	cli
 a84:	de bf       	out	0x3e, r29	; 62
 a86:	0f be       	out	0x3f, r0	; 63
 a88:	cd bf       	out	0x3d, r28	; 61
 a8a:	ed 01       	movw	r28, r26
 a8c:	08 95       	ret

00000a8e <_exit>:
 a8e:	f8 94       	cli

00000a90 <__stop_program>:
 a90:	ff cf       	rjmp	.-2      	; 0xa90 <__stop_program>
